/*******************************************************
           TESV: Skyrim script natives list 
Format:		  
	Class::Method
		Script representation;
		Engine code representation;
		
			  (C) Alexander Blade 2011	
*******************************************************/


Game::AddAchievement
  script : void Game::AddAchievement(int aiAchievementID);
  engine : void BSScript::StaticFunctionTag::AddAchievement(int aiAchievementID);

Game::AdvanceSkill
  script : void Game::AdvanceSkill(string asSkillName, float afMagnitude);
  engine : void BSScript::StaticFunctionTag::AdvanceSkill(BSFixedString const & asSkillName, float afMagnitude);

Game::AddHavokBallAndSocketConstraint
  script : bool Game::AddHavokBallAndSocketConstraint(ObjectReference arRefA, string arRefANode, ObjectReference arRefB, string arRefBNode, float afRefALocalOffsetX, float afRefALocalOffsetY, float afRefALocalOffsetZ, float afRefBLocalOffsetX, float afRefBLocalOffsetY, float afRefBLocalOffsetZ);
  engine : bool BSScript::StaticFunctionTag::AddHavokBallAndSocketConstraint(TESObjectREFR * arRefA, BSFixedString const & arRefANode, TESObjectREFR * arRefB, BSFixedString const & arRefBNode, float afRefALocalOffsetX, float afRefALocalOffsetY, float afRefALocalOffsetZ, float afRefBLocalOffsetX, float afRefBLocalOffsetY, float afRefBLocalOffsetZ);

Game::RemoveHavokConstraints
  script : bool Game::RemoveHavokConstraints(ObjectReference arFirstRef, string arFirstRefNodeName, ObjectReference arSecondRef, string arSecondRefNodeName);
  engine : bool BSScript::StaticFunctionTag::RemoveHavokConstraints(TESObjectREFR * arFirstRef, BSFixedString const & arFirstRefNodeName, TESObjectREFR * arSecondRef, BSFixedString const & arSecondRefNodeName);

Game::CalculateFavorCost
  script : int Game::CalculateFavorCost(int aiFavorPrice);
  engine : uint BSScript::StaticFunctionTag::CalculateFavorCost(uint aiFavorPrice);

Game::ClearTempEffects
  script : void Game::ClearTempEffects();
  engine : void BSScript::StaticFunctionTag::ClearTempEffects();

Game::ClearPrison
  script : void Game::ClearPrison();
  engine : void BSScript::StaticFunctionTag::ClearPrison();

Game::DisablePlayerControls
  script : void Game::DisablePlayerControls(bool abMovement, bool abFighting, bool abCamSwitch, bool abLooking, bool abSneaking, bool abMenu, bool abActivate, bool abJournalTabs, int aiDisablePOVType);
  engine : void BSScript::StaticFunctionTag::DisablePlayerControls(bool abMovement, bool abFighting, bool abCamSwitch, bool abLooking, bool abSneaking, bool abMenu, bool abActivate, bool abJournalTabs, uint aiDisablePOVType);

Game::EnablePlayerControls
  script : void Game::EnablePlayerControls(bool abMovement, bool abFighting, bool abCamSwitch, bool abLooking, bool abSneaking, bool abMenu, bool abActivate, bool abJournalTabs, int aiDisablePOVType);
  engine : void BSScript::StaticFunctionTag::EnablePlayerControls(bool abMovement, bool abFighting, bool abCamSwitch, bool abLooking, bool abSneaking, bool abMenu, bool abActivate, bool abJournalTabs, uint aiDisablePOVType);

Game::EnableFastTravel
  script : void Game::EnableFastTravel(bool abEnable);
  engine : void BSScript::StaticFunctionTag::EnableFastTravel(bool abEnable);

Game::FadeOutGame
  script : void Game::FadeOutGame(bool abFadingOut, bool abBlackFade, float afSecsBeforeFade, float afFadeDuration);
  engine : void BSScript::StaticFunctionTag::FadeOutGame(bool abFadingOut, bool abBlackFade, float afSecsBeforeFade, float afFadeDuration);

Game::FastTravel
  script : void Game::FastTravel(ObjectReference akDestination);
  engine : void BSScript::StaticFunctionTag::FastTravel(TESObjectREFR * akDestination);

Game::FindClosestReferenceOfType
  script : ObjectReference Game::FindClosestReferenceOfType(Form arBaseObject, float afX, float afY, float afZ, float afRadius);
  engine : TESObjectREFR * BSScript::StaticFunctionTag::FindClosestReferenceOfType(TESForm * arBaseObject, float afX, float afY, float afZ, float afRadius);

Game::FindClosestReferenceOfAnyTypeInList
  script : ObjectReference Game::FindClosestReferenceOfAnyTypeInList(FormList arBaseObjects, float afX, float afY, float afZ, float afRadius);
  engine : TESObjectREFR * BSScript::StaticFunctionTag::FindClosestReferenceOfAnyTypeInList(BGSListForm * arBaseObjects, float afX, float afY, float afZ, float afRadius);

Game::FindRandomReferenceOfType
  script : ObjectReference Game::FindRandomReferenceOfType(Form arBaseObject, float afX, float afY, float afZ, float afRadius);
  engine : TESObjectREFR * BSScript::StaticFunctionTag::FindRandomReferenceOfType(TESForm * arBaseObject, float afX, float afY, float afZ, float afRadius);

Game::FindRandomReferenceOfAnyTypeInList
  script : ObjectReference Game::FindRandomReferenceOfAnyTypeInList(FormList arBaseObjects, float afX, float afY, float afZ, float afRadius);
  engine : TESObjectREFR * BSScript::StaticFunctionTag::FindRandomReferenceOfAnyTypeInList(BGSListForm * arBaseObjects, float afX, float afY, float afZ, float afRadius);

Game::FindClosestActor
  script : Actor Game::FindClosestActor(float afX, float afY, float afZ, float afRadius);
  engine : Actor * BSScript::StaticFunctionTag::FindClosestActor(float afX, float afY, float afZ, float afRadius);

Game::FindRandomActor
  script : Actor Game::FindRandomActor(float afX, float afY, float afZ, float afRadius);
  engine : Actor * BSScript::StaticFunctionTag::FindRandomActor(float afX, float afY, float afZ, float afRadius);

Game::ForceThirdPerson
  script : void Game::ForceThirdPerson();
  engine : void BSScript::StaticFunctionTag::ForceThirdPerson();

Game::ForceFirstPerson
  script : void Game::ForceFirstPerson();
  engine : void BSScript::StaticFunctionTag::ForceFirstPerson();

Game::ShowFirstPersonGeometry
  script : void Game::ShowFirstPersonGeometry(bool abShow);
  engine : void BSScript::StaticFunctionTag::ShowFirstPersonGeometry(bool abShow);

Game::GetForm
  script : Form Game::GetForm(int aiFormID);
  engine : TESForm * BSScript::StaticFunctionTag::GetForm(uint aiFormID);

Game::GetGameSettingFloat
  script : float Game::GetGameSettingFloat(string asGameSetting);
  engine : float BSScript::StaticFunctionTag::GetGameSettingFloat(BSFixedString const & asGameSetting);

Game::GetGameSettingInt
  script : int Game::GetGameSettingInt(string asGameSetting);
  engine : int BSScript::StaticFunctionTag::GetGameSettingInt(BSFixedString const & asGameSetting);

Game::GetGameSettingString
  script : string Game::GetGameSettingString(string asGameSetting);
  engine : bool BSScript::StaticFunctionTag::GetGameSettingString(BSFixedString const & asGameSetting);

Game::GetPlayer
  script : Actor Game::GetPlayer();
  engine : Actor * BSScript::StaticFunctionTag::GetPlayer();

Game::GetPlayerGrabbedRef
  script : ObjectReference Game::GetPlayerGrabbedRef();
  engine : TESObjectREFR * BSScript::StaticFunctionTag::GetPlayerGrabbedRef();

Game::GetPlayersLastRiddenHorse
  script : Actor Game::GetPlayersLastRiddenHorse();
  engine : Actor * BSScript::StaticFunctionTag::GetPlayersLastRiddenHorse();

Game::GetRealHoursPassed
  script : float Game::GetRealHoursPassed();
  engine : float BSScript::StaticFunctionTag::GetRealHoursPassed();

Game::IncrementSkill
  script : void Game::IncrementSkill(string asSkillName);
  engine : void BSScript::StaticFunctionTag::IncrementSkill(BSFixedString const & asSkillName);

Game::IncrementSkillBy
  script : void Game::IncrementSkillBy(string asSkillName, int aiCount);
  engine : void BSScript::StaticFunctionTag::IncrementSkillBy(BSFixedString const & asSkillName, uint aiCount);

Game::IncrementStat
  script : void Game::IncrementStat(string asStatName, int aiModAmount);
  engine : void BSScript::StaticFunctionTag::IncrementStat(BSFixedString const & asStatName, int aiModAmount);

Game::IsActivateControlsEnabled
  script : bool Game::IsActivateControlsEnabled();
  engine : bool BSScript::StaticFunctionTag::IsActivateControlsEnabled();

Game::IsCamSwitchControlsEnabled
  script : bool Game::IsCamSwitchControlsEnabled();
  engine : bool BSScript::StaticFunctionTag::IsCamSwitchControlsEnabled();

Game::IsFastTravelEnabled
  script : bool Game::IsFastTravelEnabled();
  engine : bool BSScript::StaticFunctionTag::IsFastTravelEnabled();

Game::IsFightingControlsEnabled
  script : bool Game::IsFightingControlsEnabled();
  engine : bool BSScript::StaticFunctionTag::IsFightingControlsEnabled();

Game::IsJournalControlsEnabled
  script : bool Game::IsJournalControlsEnabled();
  engine : bool BSScript::StaticFunctionTag::IsJournalControlsEnabled();

Game::IsLookingControlsEnabled
  script : bool Game::IsLookingControlsEnabled();
  engine : bool BSScript::StaticFunctionTag::IsLookingControlsEnabled();

Game::IsMenuControlsEnabled
  script : bool Game::IsMenuControlsEnabled();
  engine : bool BSScript::StaticFunctionTag::IsMenuControlsEnabled();

Game::IsMovementControlsEnabled
  script : bool Game::IsMovementControlsEnabled();
  engine : bool BSScript::StaticFunctionTag::IsMovementControlsEnabled();

Game::IsSneakingControlsEnabled
  script : bool Game::IsSneakingControlsEnabled();
  engine : bool BSScript::StaticFunctionTag::IsSneakingControlsEnabled();

Game::IsWordUnlocked
  script : bool Game::IsWordUnlocked(WordOfPower akWord);
  engine : bool BSScript::StaticFunctionTag::IsWordUnlocked(TESWordOfPower * akWord);

Game::PlayBink
  script : void Game::PlayBink(string asFileName, bool abInterruptible, bool abMuteAudio, bool abMuteMusic, bool abLetterbox);
  engine : void BSScript::StaticFunctionTag::PlayBink(BSFixedString const & asFileName, bool abInterruptible, bool abMuteAudio, bool abMuteMusic, bool abLetterbox);

Game::PrecacheCharGen
  script : void Game::PrecacheCharGen();
  engine : void BSScript::StaticFunctionTag::PrecacheCharGen();

Game::PrecacheCharGenClear
  script : void Game::PrecacheCharGenClear();
  engine : void BSScript::StaticFunctionTag::PrecacheCharGenClear();

Game::QueryStat
  script : int Game::QueryStat(string asStat);
  engine : int BSScript::StaticFunctionTag::QueryStat(BSFixedString const & asStat);

Game::QuitToMainMenu
  script : void Game::QuitToMainMenu();
  engine : void BSScript::StaticFunctionTag::QuitToMainMenu();

Game::RequestAutosave
  script : unused;
  engine : void BSScript::StaticFunctionTag::RequestAutosave();

Game::RequestModel
  script : void Game::RequestModel(string asModelName);
  engine : void BSScript::StaticFunctionTag::RequestModel(BSFixedString const & asModelName);

Game::RequestSave
  script : void Game::RequestSave();
  engine : void BSScript::StaticFunctionTag::RequestSave();

Game::SendWereWolfTransformation
  script : void Game::SendWereWolfTransformation();
  engine : void BSScript::StaticFunctionTag::SendWereWolfTransformation();

Game::ServeTime
  script : void Game::ServeTime();
  engine : void BSScript::StaticFunctionTag::ServeTime();

Game::SetBeastForm
  script : void Game::SetBeastForm(bool abEntering);
  engine : void BSScript::StaticFunctionTag::SetBeastForm(bool abEntering);

Game::SetCameraTarget
  script : void Game::SetCameraTarget(Actor arTarget);
  engine : void BSScript::StaticFunctionTag::SetCameraTarget(Actor * arTarget);

Game::SetHudCartMode
  script : void Game::SetHudCartMode(bool abSetCartMode);
  engine : void BSScript::StaticFunctionTag::SetHudCartMode(bool abSetCartMode);

Game::SetInChargen
  script : void Game::SetInChargen(bool abDisableSaving, bool abDisableWaiting, bool abShowControlsDisabledMessage);
  engine : void BSScript::StaticFunctionTag::SetInChargen(bool abDisableSaving, bool abDisableWaiting, bool abShowControlsDisabledMessage);

Game::SetPlayerAIDriven
  script : void Game::SetPlayerAIDriven(bool abAIDriven);
  engine : void BSScript::StaticFunctionTag::SetPlayerAIDriven(bool abAIDriven);

Game::SetPlayerReportCrime
  script : void Game::SetPlayerReportCrime(bool abReportCrime);
  engine : void BSScript::StaticFunctionTag::SetPlayerReportCrime(bool abReportCrime);

Game::SetSittingRotation
  script : void Game::SetSittingRotation(float afValue);
  engine : void BSScript::StaticFunctionTag::SetSittingRotation(float afValue);

Game::ShakeCamera
  script : void Game::ShakeCamera(ObjectReference akSource, float afStrength, float afDuration);
  engine : void BSScript::StaticFunctionTag::ShakeCamera(TESObjectREFR * akSource, float afStrength, float afDuration);

Game::ShakeController
  script : void Game::ShakeController(float afSmallMotorStrength, float afBigMotorStreangth, float afDuration);
  engine : void BSScript::StaticFunctionTag::ShakeController(float afSmallMotorStrength, float afBigMotorStreangth, float afDuration);

Game::ShowTitleSequenceMenu
  script : void Game::ShowTitleSequenceMenu();
  engine : void BSScript::StaticFunctionTag::ShowTitleSequenceMenu();

Game::HideTitleSequenceMenu
  script : void Game::HideTitleSequenceMenu();
  engine : void BSScript::StaticFunctionTag::HideTitleSequenceMenu();

Game::StartTitleSequence
  script : void Game::StartTitleSequence(string asSequenceName);
  engine : void BSScript::StaticFunctionTag::StartTitleSequence(BSFixedString const & asSequenceName);

Game::ShowRaceMenu
  script : void Game::ShowRaceMenu();
  engine : void BSScript::StaticFunctionTag::ShowRaceMenu();

Game::ShowTrainingMenu
  script : void Game::ShowTrainingMenu(Actor aTrainer);
  engine : void BSScript::StaticFunctionTag::ShowTrainingMenu(Actor * aTrainer);

Game::TeachWord
  script : void Game::TeachWord(WordOfPower akWord);
  engine : void BSScript::StaticFunctionTag::TeachWord(TESWordOfPower * akWord);

Game::TriggerScreenBlood
  script : void Game::TriggerScreenBlood(int aiValue);
  engine : void BSScript::StaticFunctionTag::TriggerScreenBlood(uint aiValue);

Game::UnlockWord
  script : void Game::UnlockWord(WordOfPower akWord);
  engine : void BSScript::StaticFunctionTag::UnlockWord(TESWordOfPower * akWord);

Game::UsingGamepad
  script : bool Game::UsingGamepad();
  engine : bool BSScript::StaticFunctionTag::UsingGamepad();

Utility::GameTimeToString
  script : string Utility::GameTimeToString(float afGameTime);
  engine : bool BSScript::StaticFunctionTag::GameTimeToString(float afGameTime);

Utility::GetCurrentGameTime
  script : float Utility::GetCurrentGameTime();
  engine : float BSScript::StaticFunctionTag::GetCurrentGameTime();

Utility::GetCurrentRealTime
  script : float Utility::GetCurrentRealTime();
  engine : float BSScript::StaticFunctionTag::GetCurrentRealTime();

Utility::IsInMenuMode
  script : bool Utility::IsInMenuMode();
  engine : bool BSScript::StaticFunctionTag::IsInMenuMode();

Utility::RandomInt
  script : int Utility::RandomInt(int aiMin, int aiMax);
  engine : int BSScript::StaticFunctionTag::RandomInt(int aiMin, int aiMax);

Utility::RandomFloat
  script : float Utility::RandomFloat(float afMin, float afMax);
  engine : float BSScript::StaticFunctionTag::RandomFloat(float afMin, float afMax);

Utility::SetINIBool
  script : void Utility::SetINIBool(string ini, bool value);
  engine : void BSScript::StaticFunctionTag::SetINIBool(BSFixedString const & ini, bool value);

Utility::SetINIFloat
  script : void Utility::SetINIFloat(string ini, float value);
  engine : void BSScript::StaticFunctionTag::SetINIFloat(BSFixedString const & ini, float value);

Utility::SetINIInt
  script : void Utility::SetINIInt(string ini, int value);
  engine : void BSScript::StaticFunctionTag::SetINIInt(BSFixedString const & ini, int value);

Utility::SetINIString
  script : void Utility::SetINIString(string ini, string value);
  engine : void BSScript::StaticFunctionTag::SetINIString(BSFixedString const & ini, BSFixedString const & value);

Utility::Wait
  script : void Utility::Wait(float afSeconds);
  engine : bool BSScript::StaticFunctionTag::Wait(float afSeconds);

Utility::WaitGameTime
  script : void Utility::WaitGameTime(float afHours);
  engine : bool BSScript::StaticFunctionTag::WaitGameTime(float afHours);

Utility::WaitMenuMode
  script : void Utility::WaitMenuMode(float afSeconds);
  engine : bool BSScript::StaticFunctionTag::WaitMenuMode(float afSeconds);

Debug::CenterOnCell
  script : void Debug::CenterOnCell(string asCellname);
  engine : void BSScript::StaticFunctionTag::CenterOnCell(BSFixedString const & asCellname);

Debug::CenterOnCellAndWait
  script : float Debug::CenterOnCellAndWait(string asCellname);
  engine : bool BSScript::StaticFunctionTag::CenterOnCellAndWait(BSFixedString const & asCellname);

Debug::PlayerMoveToAndWait
  script : float Debug::PlayerMoveToAndWait(string asDestRef);
  engine : bool BSScript::StaticFunctionTag::PlayerMoveToAndWait(BSFixedString const & asDestRef);

Debug::CloseUserLog
  script : void Debug::CloseUserLog(string asLogName);
  engine : void BSScript::StaticFunctionTag::CloseUserLog(BSFixedString const & asLogName);

Debug::DebugChannelNotify
  script : void Debug::DebugChannelNotify(string channel, string message);
  engine : void BSScript::StaticFunctionTag::DebugChannelNotify(BSFixedString const & channel, BSFixedString const & message);

Debug::DumpAliasData
  script : void Debug::DumpAliasData(Quest akQuest);
  engine : void BSScript::StaticFunctionTag::DumpAliasData(TESQuest * akQuest);

Debug::GetConfigName
  script : string Debug::GetConfigName();
  engine : bool BSScript::StaticFunctionTag::GetConfigName();

Debug::GetPlatformName
  script : string Debug::GetPlatformName();
  engine : bool BSScript::StaticFunctionTag::GetPlatformName();

Debug::GetVersionNumber
  script : string Debug::GetVersionNumber();
  engine : bool BSScript::StaticFunctionTag::GetVersionNumber();

Debug::MessageBox
  script : void Debug::MessageBox(string asMessageBoxText);
  engine : void BSScript::StaticFunctionTag::MessageBox(BSFixedString const & asMessageBoxText);

Debug::Notification
  script : void Debug::Notification(string asNotificationText);
  engine : void BSScript::StaticFunctionTag::Notification(BSFixedString const & asNotificationText);

Debug::OpenUserLog
  script : bool Debug::OpenUserLog(string asLogName);
  engine : bool BSScript::StaticFunctionTag::OpenUserLog(BSFixedString const & asLogName);

Debug::QuitGame
  script : void Debug::QuitGame();
  engine : void BSScript::StaticFunctionTag::QuitGame();

Debug::SendAnimationEvent
  script : void Debug::SendAnimationEvent(ObjectReference arRef, string asEventName);
  engine : void BSScript::StaticFunctionTag::SendAnimationEvent(TESObjectREFR * arRef, BSFixedString const & asEventName);

Debug::SetFootIK
  script : void Debug::SetFootIK(bool abFootIK);
  engine : void BSScript::StaticFunctionTag::SetFootIK(bool abFootIK);

Debug::SetGodMode
  script : void Debug::SetGodMode(bool abGodMode);
  engine : void BSScript::StaticFunctionTag::SetGodMode(bool abGodMode);

Debug::StartScriptProfiling
  script : void Debug::StartScriptProfiling(string asScriptName);
  engine : void BSScript::StaticFunctionTag::StartScriptProfiling(BSFixedString const & asScriptName);

Debug::StartStackProfiling
  script : void Debug::StartStackProfiling();
  engine : void BSScript::StaticFunctionTag::StartStackProfiling();

Debug::StopScriptProfiling
  script : void Debug::StopScriptProfiling(string asScriptName);
  engine : void BSScript::StaticFunctionTag::StopScriptProfiling(BSFixedString const & asScriptName);

Debug::StopStackProfiling
  script : void Debug::StopStackProfiling();
  engine : void BSScript::StaticFunctionTag::StopStackProfiling();

Debug::TakeScreenshot
  script : void Debug::TakeScreenshot(string asFilename);
  engine : void BSScript::StaticFunctionTag::TakeScreenshot(BSFixedString const & asFilename);

Debug::ToggleAI
  script : void Debug::ToggleAI();
  engine : void BSScript::StaticFunctionTag::ToggleAI();

Debug::ToggleCollisions
  script : void Debug::ToggleCollisions();
  engine : void BSScript::StaticFunctionTag::ToggleCollisions();

Debug::ToggleMenus
  script : void Debug::ToggleMenus();
  engine : void BSScript::StaticFunctionTag::ToggleMenus();

Debug::Trace
  script : void Debug::Trace(string asTextToPrint, int aiSeverity);
  engine : void BSScript::StaticFunctionTag::Trace(BSFixedString const & asTextToPrint, uint aiSeverity);

Debug::TraceStack
  script : void Debug::TraceStack(string asTextToPrint, int aiSeverity);
  engine : void BSScript::StaticFunctionTag::TraceStack(BSFixedString const & asTextToPrint, uint aiSeverity);

Debug::TraceUser
  script : bool Debug::TraceUser(string asUserLog, string asTextToPrint, int aiSeverity);
  engine : bool BSScript::StaticFunctionTag::TraceUser(BSFixedString const & asUserLog, BSFixedString const & asTextToPrint, uint aiSeverity);

Math::abs
  script : float Math::abs(float afValue);
  engine : float BSScript::StaticFunctionTag::abs(float afValue);

Math::acos
  script : float Math::acos(float afValue);
  engine : float BSScript::StaticFunctionTag::acos(float afValue);

Math::asin
  script : float Math::asin(float afValue);
  engine : float BSScript::StaticFunctionTag::asin(float afValue);

Math::atan
  script : float Math::atan(float afValue);
  engine : float BSScript::StaticFunctionTag::atan(float afValue);

Math::Ceiling
  script : int Math::Ceiling(float afValue);
  engine : int BSScript::StaticFunctionTag::Ceiling(float afValue);

Math::cos
  script : float Math::cos(float afValue);
  engine : float BSScript::StaticFunctionTag::cos(float afValue);

Math::DegreesToRadians
  script : float Math::DegreesToRadians(float afDegrees);
  engine : float BSScript::StaticFunctionTag::DegreesToRadians(float afDegrees);

Math::Floor
  script : int Math::Floor(float afValue);
  engine : int BSScript::StaticFunctionTag::Floor(float afValue);

Math::pow
  script : float Math::pow(float x, float y);
  engine : float BSScript::StaticFunctionTag::pow(float x, float y);

Math::RadiansToDegrees
  script : float Math::RadiansToDegrees(float afRadians);
  engine : float BSScript::StaticFunctionTag::RadiansToDegrees(float afRadians);

Math::sin
  script : float Math::sin(float afValue);
  engine : float BSScript::StaticFunctionTag::sin(float afValue);

Math::sqrt
  script : float Math::sqrt(float afValue);
  engine : float BSScript::StaticFunctionTag::sqrt(float afValue);

Math::tan
  script : float Math::tan(float afValue);
  engine : float BSScript::StaticFunctionTag::tan(float afValue);

Form::GetFormID
  script : int Form::GetFormID();
  engine : uint TESForm::GetFormID();

Form::GetGoldValue
  script : int Form::GetGoldValue();
  engine : int TESForm::GetGoldValue();

Form::HasKeyword
  script : bool Form::HasKeyword(Keyword akKeyword);
  engine : bool TESForm::HasKeyword(BGSKeyword * akKeyword);

Form::PlayerKnows
  script : bool Form::PlayerKnows();
  engine : bool TESForm::PlayerKnows();

Form::RegisterForAnimationEvent
  script : bool Form::RegisterForAnimationEvent(ObjectReference akSender, String asEventName);
  engine : bool TESForm::RegisterForAnimationEvent(TESObjectREFR * akSender, BSFixedString const & asEventName);

Form::RegisterForLOS
  script : None Form::RegisterForLOS(Actor akViewer, ObjectReference akTarget);
  engine : void TESForm::RegisterForLOS(Actor * akViewer, TESObjectREFR * akTarget);

Form::RegisterForSingleLOSGain
  script : None Form::RegisterForSingleLOSGain(Actor akViewer, ObjectReference akTarget);
  engine : void TESForm::RegisterForSingleLOSGain(Actor * akViewer, TESObjectREFR * akTarget);

Form::RegisterForSingleLOSLost
  script : None Form::RegisterForSingleLOSLost(Actor akViewer, ObjectReference akTarget);
  engine : void TESForm::RegisterForSingleLOSLost(Actor * akViewer, TESObjectREFR * akTarget);

Form::RegisterForSingleUpdate
  script : None Form::RegisterForSingleUpdate(float afInterval);
  engine : void TESForm::RegisterForSingleUpdate(float afInterval);

Form::RegisterForSingleUpdateGameTime
  script : None Form::RegisterForSingleUpdateGameTime(float afInterval);
  engine : void TESForm::RegisterForSingleUpdateGameTime(float afInterval);

Form::RegisterForSleep
  script : None Form::RegisterForSleep();
  engine : void TESForm::RegisterForSleep();

Form::RegisterForTrackedStatsEvent
  script : None Form::RegisterForTrackedStatsEvent();
  engine : void TESForm::RegisterForTrackedStatsEvent();

Form::RegisterForUpdate
  script : None Form::RegisterForUpdate(float afInterval);
  engine : void TESForm::RegisterForUpdate(float afInterval);

Form::RegisterForUpdateGameTime
  script : None Form::RegisterForUpdateGameTime(float afInterval);
  engine : void TESForm::RegisterForUpdateGameTime(float afInterval);

Form::StartObjectProfiling
  script : None Form::StartObjectProfiling();
  engine : void TESForm::StartObjectProfiling();

Form::StopObjectProfiling
  script : None Form::StopObjectProfiling();
  engine : void TESForm::StopObjectProfiling();

Form::UnregisterForAnimationEvent
  script : None Form::UnregisterForAnimationEvent(ObjectReference akSender, String asEventName);
  engine : void TESForm::UnregisterForAnimationEvent(TESObjectREFR * akSender, BSFixedString const & asEventName);

Form::UnregisterForLOS
  script : None Form::UnregisterForLOS(Actor akViewer, ObjectReference akTarget);
  engine : void TESForm::UnregisterForLOS(Actor * akViewer, TESObjectREFR * akTarget);

Form::UnregisterForSleep
  script : None Form::UnregisterForSleep();
  engine : void TESForm::UnregisterForSleep();

Form::UnregisterForTrackedStatsEvent
  script : None Form::UnregisterForTrackedStatsEvent();
  engine : void TESForm::UnregisterForTrackedStatsEvent();

Form::UnregisterForUpdate
  script : None Form::UnregisterForUpdate();
  engine : void TESForm::UnregisterForUpdate();

Form::UnregisterForUpdateGameTime
  script : None Form::UnregisterForUpdateGameTime();
  engine : void TESForm::UnregisterForUpdateGameTime();

Keyword::SendStoryEvent
  script : None Keyword::SendStoryEvent(Location akLoc, ObjectReference akRef1, ObjectReference akRef2, int aiValue1, int aiValue2);
  engine : void BGSKeyword::SendStoryEvent(BGSLocation * akLoc, TESObjectREFR * akRef1, TESObjectREFR * akRef2, uint aiValue1, uint aiValue2);

Keyword::SendStoryEventAndWait
  script : bool Keyword::SendStoryEventAndWait(Location akLoc, ObjectReference akRef1, ObjectReference akRef2, int aiValue1, int aiValue2);
  engine : bool BGSKeyword::SendStoryEventAndWait(BGSLocation * akLoc, TESObjectREFR * akRef1, TESObjectREFR * akRef2, uint aiValue1, uint aiValue2);

Location::GetKeywordData
  script : float Location::GetKeywordData(Keyword akKeyword);
  engine : float BGSLocation::GetKeywordData(BGSKeyword * akKeyword);

Location::GetRefTypeAliveCount
  script : int Location::GetRefTypeAliveCount(LocationRefType akRefType);
  engine : uint BGSLocation::GetRefTypeAliveCount(BGSLocationRefType * akRefType);

Location::GetRefTypeDeadCount
  script : int Location::GetRefTypeDeadCount(LocationRefType akRefType);
  engine : uint BGSLocation::GetRefTypeDeadCount(BGSLocationRefType * akRefType);

Location::HasCommonParent
  script : bool Location::HasCommonParent(Location akOther, Keyword akFilter);
  engine : bool BGSLocation::HasCommonParent(BGSLocation * akOther, BGSKeyword * akFilter);

Location::HasRefType
  script : bool Location::HasRefType(LocationRefType akRefType);
  engine : bool BGSLocation::HasRefType(BGSLocationRefType * akRefType);

Location::IsChild
  script : bool Location::IsChild(Location akOther);
  engine : bool BGSLocation::IsChild(BGSLocation * akOther);

Location::IsCleared
  script : bool Location::IsCleared();
  engine : bool BGSLocation::IsCleared();

Location::IsLoaded
  script : bool Location::IsLoaded();
  engine : bool BGSLocation::IsLoaded();

Location::SetCleared
  script : void Location::SetCleared(bool abCleared);
  engine : void BGSLocation::SetCleared(bool abCleared);

Location::SetKeywordData
  script : void Location::SetKeywordData(Keyword akKeyword, float afData);
  engine : void BGSLocation::SetKeywordData(BGSKeyword * akKeyword, float afData);

Message::Show
  script : int Message::Show(float afArg1, float afArg2, float afArg3, float afArg4, float afArg5, float afArg6, float afArg7, float afArg8, float afArg9);
  engine : bool BGSMessage::Show(float afArg1, float afArg2, float afArg3, float afArg4, float afArg5, float afArg6, float afArg7, float afArg8, float afArg9);

Message::ShowAsHelpMessage
  script : void Message::ShowAsHelpMessage(string asEvent, float afDuration, float afInterval, int aiMaxTimes);
  engine : void BGSMessage::ShowAsHelpMessage(BSFixedString const & asEvent, float afDuration, float afInterval, int aiMaxTimes);

Message::ResetHelpMessage
  script : void Message::ResetHelpMessage(string asEvent);
  engine : void BSScript::StaticFunctionTag::ResetHelpMessage(BSFixedString const & asEvent);

MusicType::Add
  script : None MusicType::Add();
  engine : void BGSMusicType::Add();

MusicType::Remove
  script : None MusicType::Remove();
  engine : void BGSMusicType::Remove();

VisualEffect::Play
  script : void VisualEffect::Play(ObjectReference akObject, float afTime, ObjectReference akFacingObject);
  engine : void BGSReferenceEffect::Play(TESObjectREFR * akObject, float afTime, TESObjectREFR * akFacingObject);

VisualEffect::Stop
  script : void VisualEffect::Stop(ObjectReference akObject);
  engine : void BGSReferenceEffect::Stop(TESObjectREFR * akObject);

Scene::ForceStart
  script : void Scene::ForceStart();
  engine : void BGSScene::ForceStart();

Scene::GetOwningQuest
  script : Quest Scene::GetOwningQuest();
  engine : TESQuest * BGSScene::GetOwningQuest();

Scene::IsActionComplete
  script : bool Scene::IsActionComplete(int aiActionID);
  engine : bool BGSScene::IsActionComplete(uint aiActionID);

Scene::IsPlaying
  script : bool Scene::IsPlaying();
  engine : bool BGSScene::IsPlaying();

Scene::Start
  script : void Scene::Start();
  engine : void BGSScene::Start();

Scene::Stop
  script : void Scene::Stop();
  engine : void BGSScene::Stop();

ShaderParticleGeometry::Apply
  script : void ShaderParticleGeometry::Apply(float afFadeTime);
  engine : void BGSShaderParticleGeometryData::Apply(float afFadeTime);

ShaderParticleGeometry::Remove
  script : void ShaderParticleGeometry::Remove(float afFadeTime);
  engine : void BGSShaderParticleGeometryData::Remove(float afFadeTime);

SoundCategory::Pause
  script : void SoundCategory::Pause();
  engine : void BGSSoundCategory::Pause();

SoundCategory::UnPause
  script : void SoundCategory::UnPause();
  engine : void BGSSoundCategory::UnPause();

SoundCategory::Mute
  script : void SoundCategory::Mute();
  engine : void BGSSoundCategory::Mute();

SoundCategory::UnMute
  script : void SoundCategory::UnMute();
  engine : void BGSSoundCategory::UnMute();

SoundCategory::SetVolume
  script : void SoundCategory::SetVolume(float afVolume);
  engine : void BGSSoundCategory::SetVolume(float afVolume);

SoundCategory::SetFrequency
  script : void SoundCategory::SetFrequency(float afFrequencyCoeffecient);
  engine : void BGSSoundCategory::SetFrequency(float afFrequencyCoeffecient);

MagicEffect::GetAssociatedSkill
  script : string MagicEffect::GetAssociatedSkill();
  engine : bool EffectSetting::GetAssociatedSkill();

EffectShader::Play
  script : void EffectShader::Play(ObjectReference akObject, float afDuration);
  engine : void TESEffectShader::Play(TESObjectREFR * akObject, float afDuration);

EffectShader::Stop
  script : void EffectShader::Stop(ObjectReference akObject);
  engine : void TESEffectShader::Stop(TESObjectREFR * akObject);

Faction::CanPayCrimeGold
  script : bool Faction::CanPayCrimeGold();
  engine : bool TESFaction::CanPayCrimeGold();

Faction::GetCrimeGold
  script : int Faction::GetCrimeGold();
  engine : uint TESFaction::GetCrimeGold();

Faction::GetCrimeGoldNonViolent
  script : int Faction::GetCrimeGoldNonViolent();
  engine : uint TESFaction::GetCrimeGoldNonViolent();

Faction::GetCrimeGoldViolent
  script : int Faction::GetCrimeGoldViolent();
  engine : uint TESFaction::GetCrimeGoldViolent();

Faction::GetInfamy
  script : int Faction::GetInfamy();
  engine : uint TESFaction::GetInfamy();

Faction::GetInfamyNonViolent
  script : int Faction::GetInfamyNonViolent();
  engine : uint TESFaction::GetInfamyNonViolent();

Faction::GetInfamyViolent
  script : int Faction::GetInfamyViolent();
  engine : uint TESFaction::GetInfamyViolent();

Faction::GetReaction
  script : int Faction::GetReaction(Faction akOther);
  engine : int TESFaction::GetReaction(TESFaction * akOther);

Faction::GetStolenItemValueCrime
  script : int Faction::GetStolenItemValueCrime();
  engine : uint TESFaction::GetStolenItemValueCrime();

Faction::GetStolenItemValueNoCrime
  script : int Faction::GetStolenItemValueNoCrime();
  engine : uint TESFaction::GetStolenItemValueNoCrime();

Faction::IsFactionInCrimeGroup
  script : bool Faction::IsFactionInCrimeGroup(Faction akOther);
  engine : bool TESFaction::IsFactionInCrimeGroup(TESFaction * akOther);

Faction::IsPlayerExpelled
  script : bool Faction::IsPlayerExpelled();
  engine : bool TESFaction::IsPlayerExpelled();

Faction::ModCrimeGold
  script : void Faction::ModCrimeGold(int aiAmount, bool abViolent);
  engine : void TESFaction::ModCrimeGold(int aiAmount, bool abViolent);

Faction::ModReaction
  script : void Faction::ModReaction(Faction akOther, int aiAmount);
  engine : void TESFaction::ModReaction(TESFaction * akOther, int aiAmount);

Faction::PlayerPayCrimeGold
  script : void Faction::PlayerPayCrimeGold(bool abRemoveStolenItems, bool abGoToJail);
  engine : void TESFaction::PlayerPayCrimeGold(bool abRemoveStolenItems, bool abGoToJail);

Faction::SendAssaultAlarm
  script : void Faction::SendAssaultAlarm();
  engine : void TESFaction::SendAssaultAlarm();

Faction::SendPlayerToJail
  script : void Faction::SendPlayerToJail(bool abRemoveInventory, bool abRealJail);
  engine : bool TESFaction::SendPlayerToJail(bool abRemoveInventory, bool abRealJail);

Faction::SetAlly
  script : void Faction::SetAlly(Faction akOther, bool abSelfIsFriendToOther, bool abOtherIsFriendToSelf);
  engine : void TESFaction::SetAlly(TESFaction * akOther, bool abSelfIsFriendToOther, bool abOtherIsFriendToSelf);

Faction::SetCrimeGold
  script : void Faction::SetCrimeGold(int aiGold);
  engine : void TESFaction::SetCrimeGold(uint aiGold);

Faction::SetCrimeGoldViolent
  script : void Faction::SetCrimeGoldViolent(int aiGold);
  engine : void TESFaction::SetCrimeGoldViolent(uint aiGold);

Faction::SetEnemy
  script : void Faction::SetEnemy(Faction akOther, bool abSelfIsNeutralToOther, bool abOtherIsNeutralToSelf);
  engine : void TESFaction::SetEnemy(TESFaction * akOther, bool abSelfIsNeutralToOther, bool abOtherIsNeutralToSelf);

Faction::SetPlayerEnemy
  script : void Faction::SetPlayerEnemy(bool abIsEnemy);
  engine : void TESFaction::SetPlayerEnemy(bool abIsEnemy);

Faction::SetPlayerExpelled
  script : void Faction::SetPlayerExpelled(bool abIsExpelled);
  engine : void TESFaction::SetPlayerExpelled(bool abIsExpelled);

Faction::SetReaction
  script : void Faction::SetReaction(Faction akOther, int aiNewValue);
  engine : void TESFaction::SetReaction(TESFaction * akOther, int aiNewValue);

GlobalVariable::GetValue
  script : float GlobalVariable::GetValue();
  engine : float TESGlobal::GetValue();

GlobalVariable::SetValue
  script : void GlobalVariable::SetValue(float afNewValue);
  engine : void TESGlobal::SetValue(float afNewValue);

ImageSpaceModifier::Apply
  script : void ImageSpaceModifier::Apply(float afStrength);
  engine : void TESImageSpaceModifier::Apply(float afStrength);

ImageSpaceModifier::ApplyCrossFade
  script : void ImageSpaceModifier::ApplyCrossFade(float afFadeDuration);
  engine : void TESImageSpaceModifier::ApplyCrossFade(float afFadeDuration);

ImageSpaceModifier::PopTo
  script : void ImageSpaceModifier::PopTo(ImageSpaceModifier akNewModifier, float afStrength);
  engine : void TESImageSpaceModifier::PopTo(TESImageSpaceModifier * akNewModifier, float afStrength);

ImageSpaceModifier::Remove
  script : void ImageSpaceModifier::Remove();
  engine : void TESImageSpaceModifier::Remove();

ImageSpaceModifier::RemoveCrossFade
  script : void ImageSpaceModifier::RemoveCrossFade(float afFadeDuration);
  engine : void BSScript::StaticFunctionTag::RemoveCrossFade(float afFadeDuration);

LeveledActor::AddForm
  script : void LeveledActor::AddForm(Form apForm, int aiLevel);
  engine : void TESLevCharacter::AddForm(TESForm * apForm, uint aiLevel);

LeveledActor::Revert
  script : void LeveledActor::Revert();
  engine : void TESLevCharacter::Revert();

LeveledItem::AddForm
  script : void LeveledItem::AddForm(Form apForm, int aiLevel, int aiCount);
  engine : void TESLevItem::AddForm(TESForm * apForm, uint aiLevel, uint aiCount);

LeveledItem::Revert
  script : void LeveledItem::Revert();
  engine : void TESLevItem::Revert();

LeveledSpell::AddForm
  script : void LeveledSpell::AddForm(Form apForm, int aiLevel);
  engine : void TESLevSpell::AddForm(TESForm * apForm, uint aiLevel);

LeveledSpell::Revert
  script : void LeveledSpell::Revert();
  engine : void TESLevSpell::Revert();

ActorBase::GetClass
  script : Class ActorBase::GetClass();
  engine : TESClass * TESNPC::GetClass();

ActorBase::GetDeadCount
  script : int ActorBase::GetDeadCount();
  engine : int TESNPC::GetDeadCount();

ActorBase::GetGiftFilter
  script : FormList ActorBase::GetGiftFilter();
  engine : BGSListForm * TESNPC::GetGiftFilter();

ActorBase::GetRace
  script : Race ActorBase::GetRace();
  engine : TESRace * TESNPC::GetRace();

ActorBase::GetSex
  script : int ActorBase::GetSex();
  engine : int TESNPC::GetSex();

ActorBase::IsEssential
  script : bool ActorBase::IsEssential();
  engine : bool TESNPC::IsEssential();

ActorBase::IsInvulnerable
  script : bool ActorBase::IsInvulnerable();
  engine : bool TESNPC::IsInvulnerable();

ActorBase::IsProtected
  script : bool ActorBase::IsProtected();
  engine : bool TESNPC::IsProtected();

ActorBase::IsUnique
  script : bool ActorBase::IsUnique();
  engine : bool TESNPC::IsUnique();

ActorBase::SetEssential
  script : void ActorBase::SetEssential(bool abEssential);
  engine : void TESNPC::SetEssential(bool abEssential);

ActorBase::SetInvulnerable
  script : void ActorBase::SetInvulnerable(bool abInvulnerable);
  engine : void TESNPC::SetInvulnerable(bool abInvulnerable);

ActorBase::SetProtected
  script : void ActorBase::SetProtected(bool abProtected);
  engine : void TESNPC::SetProtected(bool abProtected);

ActorBase::SetOutfit
  script : void ActorBase::SetOutfit(Outfit akOutfit, bool abSleepOutfit);
  engine : void TESNPC::SetOutfit(BGSOutfit * akOutfit, bool abSleepOutfit);

Cell::GetActorOwner
  script : ActorBase Cell::GetActorOwner();
  engine : TESNPC * TESObjectCELL::GetActorOwner();

Cell::GetFactionOwner
  script : Faction Cell::GetFactionOwner();
  engine : TESFaction * TESObjectCELL::GetFactionOwner();

Cell::IsAttached
  script : bool Cell::IsAttached();
  engine : bool TESObjectCELL::IsAttached();

Cell::IsInterior
  script : bool Cell::IsInterior();
  engine : bool TESObjectCELL::IsInterior();

Cell::Reset
  script : void Cell::Reset();
  engine : void TESObjectCELL::Reset();

Cell::SetActorOwner
  script : void Cell::SetActorOwner(ActorBase akActor);
  engine : void TESObjectCELL::SetActorOwner(TESNPC * akActor);

Cell::SetFactionOwner
  script : void Cell::SetFactionOwner(Faction akFaction);
  engine : void TESObjectCELL::SetFactionOwner(TESFaction * akFaction);

Cell::SetFogColor
  script : void Cell::SetFogColor(int aiNearRed, int aiNearGreen, int aiNearBlue, int aiFarRed, int aiFarGreen, int aiFarBlue);
  engine : void TESObjectCELL::SetFogColor(uint aiNearRed, uint aiNearGreen, uint aiNearBlue, uint aiFarRed, uint aiFarGreen, uint aiFarBlue);

Cell::SetFogPlanes
  script : void Cell::SetFogPlanes(float afNear, float afFar);
  engine : void TESObjectCELL::SetFogPlanes(float afNear, float afFar);

Cell::SetFogPower
  script : void Cell::SetFogPower(float afPower);
  engine : void TESObjectCELL::SetFogPower(float afPower);

Cell::SetPublic
  script : void Cell::SetPublic(bool abPublic);
  engine : void TESObjectCELL::SetPublic(bool abPublic);

ObjectReference::Activate
  script : bool ObjectReference::Activate(ObjectReference akActivator, bool abDefaultProcessingOnly);
  engine : bool TESObjectREFR::Activate(TESObjectREFR * akActivator, bool abDefaultProcessingOnly);

ObjectReference::AddInventoryEventFilter
  script : void ObjectReference::AddInventoryEventFilter(Form akFilter);
  engine : void TESObjectREFR::AddInventoryEventFilter(TESForm * akFilter);

ObjectReference::TetherToHorse
  script : void ObjectReference::TetherToHorse(ObjectReference akHorse);
  engine : void TESObjectREFR::TetherToHorse(TESObjectREFR * akHorse);

ObjectReference::AddDependentAnimatedObjectReference
  script : bool ObjectReference::AddDependentAnimatedObjectReference(ObjectReference akDependent);
  engine : bool TESObjectREFR::AddDependentAnimatedObjectReference(TESObjectREFR * akDependent);

ObjectReference::AddItem
  script : void ObjectReference::AddItem(Form akItemToAdd, int aiCount, bool abSilent);
  engine : bool TESObjectREFR::AddItem(TESForm * akItemToAdd, uint aiCount, bool abSilent);

ObjectReference::AddToMap
  script : void ObjectReference::AddToMap(bool abAllowFastTravel);
  engine : void TESObjectREFR::AddToMap(bool abAllowFastTravel);

ObjectReference::ApplyHavokImpulse
  script : void ObjectReference::ApplyHavokImpulse(float afX, float afY, float afZ, float afMagnitude);
  engine : bool TESObjectREFR::ApplyHavokImpulse(float afX, float afY, float afZ, float afMagnitude);

ObjectReference::BlockActivation
  script : void ObjectReference::BlockActivation(bool abBlocked);
  engine : void TESObjectREFR::BlockActivation(bool abBlocked);

ObjectReference::CalculateEncounterLevel
  script : int ObjectReference::CalculateEncounterLevel(int aiDifficulty);
  engine : uint TESObjectREFR::CalculateEncounterLevel(uint aiDifficulty);

ObjectReference::CanFastTravelToMarker
  script : bool ObjectReference::CanFastTravelToMarker();
  engine : bool TESObjectREFR::CanFastTravelToMarker();

ObjectReference::ClearDestruction
  script : void ObjectReference::ClearDestruction();
  engine : void TESObjectREFR::ClearDestruction();

ObjectReference::CreateDetectionEvent
  script : void ObjectReference::CreateDetectionEvent(Actor akOwner, int aiSoundLevel);
  engine : void TESObjectREFR::CreateDetectionEvent(Actor * akOwner, uint aiSoundLevel);

ObjectReference::DamageObject
  script : void ObjectReference::DamageObject(float afDamage);
  engine : bool TESObjectREFR::DamageObject(float afDamage);

ObjectReference::Delete
  script : void ObjectReference::Delete();
  engine : bool TESObjectREFR::Delete();

ObjectReference::Disable
  script : void ObjectReference::Disable(bool abFadeOut);
  engine : bool TESObjectREFR::Disable(bool abFadeOut);

ObjectReference::DisableNoWait
  script : void ObjectReference::DisableNoWait(bool abFadeOut);
  engine : void TESObjectREFR::DisableNoWait(bool abFadeOut);

ObjectReference::DropObject
  script : ObjectReference ObjectReference::DropObject(Form akObject, int aiCount);
  engine : bool TESObjectREFR::DropObject(TESForm * akObject, uint aiCount);

ObjectReference::Enable
  script : void ObjectReference::Enable(bool abFadeIn);
  engine : bool TESObjectREFR::Enable(bool abFadeIn);

ObjectReference::EnableFastTravel
  script : void ObjectReference::EnableFastTravel(bool abEnable);
  engine : void TESObjectREFR::EnableFastTravel(bool abEnable);

ObjectReference::EnableNoWait
  script : void ObjectReference::EnableNoWait(bool abFadeIn);
  engine : void TESObjectREFR::EnableNoWait(bool abFadeIn);

ObjectReference::ForceAddRagdollToWorld
  script : void ObjectReference::ForceAddRagdollToWorld();
  engine : bool TESObjectREFR::ForceAddRagdollToWorld();

ObjectReference::ForceRemoveRagdollFromWorld
  script : void ObjectReference::ForceRemoveRagdollFromWorld();
  engine : bool TESObjectREFR::ForceRemoveRagdollFromWorld();

ObjectReference::GetActorOwner
  script : ActorBase ObjectReference::GetActorOwner();
  engine : TESNPC * TESObjectREFR::GetActorOwner();

ObjectReference::GetAngleX
  script : float ObjectReference::GetAngleX();
  engine : float TESObjectREFR::GetAngleX();

ObjectReference::GetAngleY
  script : float ObjectReference::GetAngleY();
  engine : float TESObjectREFR::GetAngleY();

ObjectReference::GetAngleZ
  script : float ObjectReference::GetAngleZ();
  engine : float TESObjectREFR::GetAngleZ();

ObjectReference::GetAnimationVariableBool
  script : bool ObjectReference::GetAnimationVariableBool(string arVariableName);
  engine : bool TESObjectREFR::GetAnimationVariableBool(BSFixedString const & arVariableName);

ObjectReference::GetAnimationVariableInt
  script : int ObjectReference::GetAnimationVariableInt(string arVariableName);
  engine : int TESObjectREFR::GetAnimationVariableInt(BSFixedString const & arVariableName);

ObjectReference::GetAnimationVariableFloat
  script : float ObjectReference::GetAnimationVariableFloat(string arVariableName);
  engine : float TESObjectREFR::GetAnimationVariableFloat(BSFixedString const & arVariableName);

ObjectReference::GetBaseObject
  script : Form ObjectReference::GetBaseObject();
  engine : TESForm * TESObjectREFR::GetBaseObject();

ObjectReference::GetCurrentDestructionStage
  script : int ObjectReference::GetCurrentDestructionStage();
  engine : int TESObjectREFR::GetCurrentDestructionStage();

ObjectReference::GetCurrentLocation
  script : location ObjectReference::GetCurrentLocation();
  engine : BGSLocation * TESObjectREFR::GetCurrentLocation();

ObjectReference::GetCurrentScene
  script : Scene ObjectReference::GetCurrentScene();
  engine : BGSScene * TESObjectREFR::GetCurrentScene();

ObjectReference::GetDistance
  script : float ObjectReference::GetDistance(ObjectReference akOther);
  engine : float TESObjectREFR::GetDistance(TESObjectREFR * akOther);

ObjectReference::GetEditorLocation
  script : location ObjectReference::GetEditorLocation();
  engine : BGSLocation * TESObjectREFR::GetEditorLocation();

ObjectReference::GetFactionOwner
  script : Faction ObjectReference::GetFactionOwner();
  engine : TESFaction * TESObjectREFR::GetFactionOwner();

ObjectReference::GetHeadingAngle
  script : float ObjectReference::GetHeadingAngle(ObjectReference akOther);
  engine : float TESObjectREFR::GetHeadingAngle(TESObjectREFR * akOther);

ObjectReference::GetHeight
  script : float ObjectReference::GetHeight();
  engine : float TESObjectREFR::GetHeight();

ObjectReference::GetItemCount
  script : int ObjectReference::GetItemCount(Form akItem);
  engine : uint TESObjectREFR::GetItemCount(TESForm * akItem);

ObjectReference::GetItemHealthPercent
  script : float ObjectReference::GetItemHealthPercent();
  engine : float TESObjectREFR::GetItemHealthPercent();

ObjectReference::GetKey
  script : Key ObjectReference::GetKey();
  engine : TESKey * TESObjectREFR::GetKey();

ObjectReference::GetLength
  script : float ObjectReference::GetLength();
  engine : float TESObjectREFR::GetLength();

ObjectReference::GetLinkedRef
  script : ObjectReference ObjectReference::GetLinkedRef(Keyword apKeyword);
  engine : TESObjectREFR * TESObjectREFR::GetLinkedRef(BGSKeyword * apKeyword);

ObjectReference::GetLockLevel
  script : int ObjectReference::GetLockLevel();
  engine : int TESObjectREFR::GetLockLevel();

ObjectReference::GetMass
  script : float ObjectReference::GetMass();
  engine : float TESObjectREFR::GetMass();

ObjectReference::GetNthLinkedRef
  script : ObjectReference ObjectReference::GetNthLinkedRef(int aiLinkedRef);
  engine : TESObjectREFR * TESObjectREFR::GetNthLinkedRef(int aiLinkedRef);

ObjectReference::GetOpenState
  script : int ObjectReference::GetOpenState();
  engine : uint TESObjectREFR::GetOpenState();

ObjectReference::GetParentCell
  script : cell ObjectReference::GetParentCell();
  engine : TESObjectCELL * TESObjectREFR::GetParentCell();

ObjectReference::GetPositionX
  script : float ObjectReference::GetPositionX();
  engine : float TESObjectREFR::GetPositionX();

ObjectReference::GetPositionY
  script : float ObjectReference::GetPositionY();
  engine : float TESObjectREFR::GetPositionY();

ObjectReference::GetPositionZ
  script : float ObjectReference::GetPositionZ();
  engine : float TESObjectREFR::GetPositionZ();

ObjectReference::GetScale
  script : float ObjectReference::GetScale();
  engine : float TESObjectREFR::GetScale();

ObjectReference::GetTriggerObjectCount
  script : int ObjectReference::GetTriggerObjectCount();
  engine : uint TESObjectREFR::GetTriggerObjectCount();

ObjectReference::GetVoiceType
  script : VoiceType ObjectReference::GetVoiceType();
  engine : BGSVoiceType * TESObjectREFR::GetVoiceType();

ObjectReference::GetWidth
  script : float ObjectReference::GetWidth();
  engine : float TESObjectREFR::GetWidth();

ObjectReference::GetWorldSpace
  script : WorldSpace ObjectReference::GetWorldSpace();
  engine : TESWorldSpace * TESObjectREFR::GetWorldSpace();

ObjectReference::HasEffectKeyword
  script : bool ObjectReference::HasEffectKeyword(Keyword akKeyword);
  engine : bool TESObjectREFR::HasEffectKeyword(BGSKeyword * akKeyword);

ObjectReference::HasNode
  script : bool ObjectReference::HasNode(string asNodeName);
  engine : bool TESObjectREFR::HasNode(BSFixedString const & asNodeName);

ObjectReference::HasRefType
  script : bool ObjectReference::HasRefType(LocationRefType akRefType);
  engine : bool TESObjectREFR::HasRefType(BGSLocationRefType * akRefType);

ObjectReference::IgnoreFriendlyHits
  script : void ObjectReference::IgnoreFriendlyHits(bool abIgnore);
  engine : void TESObjectREFR::IgnoreFriendlyHits(bool abIgnore);

ObjectReference::InterruptCast
  script : void ObjectReference::InterruptCast();
  engine : void TESObjectREFR::InterruptCast();

ObjectReference::Is3DLoaded
  script : bool ObjectReference::Is3DLoaded();
  engine : bool TESObjectREFR::Is3DLoaded();

ObjectReference::IsActivateChild
  script : bool ObjectReference::IsActivateChild(ObjectReference akChild);
  engine : bool TESObjectREFR::IsActivateChild(TESObjectREFR * akChild);

ObjectReference::IsActivationBlocked
  script : bool ObjectReference::IsActivationBlocked();
  engine : bool TESObjectREFR::IsActivationBlocked();

ObjectReference::IsDisabled
  script : bool ObjectReference::IsDisabled();
  engine : bool TESObjectREFR::IsDisabled();

ObjectReference::IsFurnitureInUse
  script : bool ObjectReference::IsFurnitureInUse(bool abIgnoreReserved);
  engine : bool TESObjectREFR::IsFurnitureInUse(bool abIgnoreReserved);

ObjectReference::IsFurnitureMarkerInUse
  script : bool ObjectReference::IsFurnitureMarkerInUse(int aiMarker, bool abIgnoreReserved);
  engine : bool TESObjectREFR::IsFurnitureMarkerInUse(uint aiMarker, bool abIgnoreReserved);

ObjectReference::IsIgnoringFriendlyHits
  script : bool ObjectReference::IsIgnoringFriendlyHits();
  engine : bool TESObjectREFR::IsIgnoringFriendlyHits();

ObjectReference::IsInDialogueWithPlayer
  script : bool ObjectReference::IsInDialogueWithPlayer();
  engine : bool TESObjectREFR::IsInDialogueWithPlayer();

ObjectReference::IsLockBroken
  script : bool ObjectReference::IsLockBroken();
  engine : bool TESObjectREFR::IsLockBroken();

ObjectReference::IsLocked
  script : bool ObjectReference::IsLocked();
  engine : bool TESObjectREFR::IsLocked();

ObjectReference::IsMapMarkerVisible
  script : bool ObjectReference::IsMapMarkerVisible();
  engine : bool TESObjectREFR::IsMapMarkerVisible();

ObjectReference::KnockAreaEffect
  script : void ObjectReference::KnockAreaEffect(float afMagnitude, float afRadius);
  engine : void TESObjectREFR::KnockAreaEffect(float afMagnitude, float afRadius);

ObjectReference::Lock
  script : void ObjectReference::Lock(bool abLock, bool abAsOwner);
  engine : void TESObjectREFR::Lock(bool abLock, bool abAsOwner);

ObjectReference::MoveTo
  script : void ObjectReference::MoveTo(ObjectReference akTarget, float afXOffset, float afYOffset, float afZOffset, bool abMatchRotation);
  engine : bool TESObjectREFR::MoveTo(TESObjectREFR * akTarget, float afXOffset, float afYOffset, float afZOffset, bool abMatchRotation);

ObjectReference::MoveToInteractionLocation
  script : void ObjectReference::MoveToInteractionLocation(ObjectReference akTarget);
  engine : bool TESObjectREFR::MoveToInteractionLocation(TESObjectREFR * akTarget);

ObjectReference::MoveToMyEditorLocation
  script : void ObjectReference::MoveToMyEditorLocation();
  engine : bool TESObjectREFR::MoveToMyEditorLocation();

ObjectReference::MoveToNode
  script : void ObjectReference::MoveToNode(ObjectReference akTarget, string asNodeName);
  engine : bool TESObjectREFR::MoveToNode(TESObjectREFR * akTarget, BSFixedString const & asNodeName);

ObjectReference::PlaceAtMe
  script : ObjectReference ObjectReference::PlaceAtMe(Form akFormToPlace, int aiCount, bool abForcePersist, bool abInitiallyDisabled);
  engine : TESObjectREFR * TESObjectREFR::PlaceAtMe(TESForm * akFormToPlace, uint aiCount, bool abForcePersist, bool abInitiallyDisabled);

ObjectReference::PlaceActorAtMe
  script : Actor ObjectReference::PlaceActorAtMe(ActorBase akActorToPlace, int aiLevelMod, EncounterZone akZone);
  engine : Actor * TESObjectREFR::PlaceActorAtMe(TESNPC * akActorToPlace, uint aiLevelMod, BGSEncounterZone * akZone);

ObjectReference::PlayAnimation
  script : bool ObjectReference::PlayAnimation(string asAnimation);
  engine : bool TESObjectREFR::PlayAnimation(BSFixedString const & asAnimation);

ObjectReference::PlayAnimationAndWait
  script : bool ObjectReference::PlayAnimationAndWait(string asAnimation, string asEventName);
  engine : bool TESObjectREFR::PlayAnimationAndWait(BSFixedString const & asAnimation, BSFixedString const & asEventName);

ObjectReference::PlayGamebryoAnimation
  script : bool ObjectReference::PlayGamebryoAnimation(string asAnimation, bool abStartOver, float afEaseInTime);
  engine : bool TESObjectREFR::PlayGamebryoAnimation(BSFixedString const & asAnimation, bool abStartOver, float afEaseInTime);

ObjectReference::PlayImpactEffect
  script : bool ObjectReference::PlayImpactEffect(ImpactDataSet akImpactEffect, string asNodeName, float afPickDirX, float afPickDirY, float afPickDirZ, float afPickLength, bool abApplyNodeRotation, bool abUseNodeLocalRotation);
  engine : bool TESObjectREFR::PlayImpactEffect(BGSImpactDataSet * akImpactEffect, BSFixedString const & asNodeName, float afPickDirX, float afPickDirY, float afPickDirZ, float afPickLength, bool abApplyNodeRotation, bool abUseNodeLocalRotation);

ObjectReference::PlaySyncedAnimationSS
  script : bool ObjectReference::PlaySyncedAnimationSS(string asAnimation1, ObjectReference akObj2, string asAnimation2);
  engine : bool TESObjectREFR::PlaySyncedAnimationSS(BSFixedString const & asAnimation1, TESObjectREFR * akObj2, BSFixedString const & asAnimation2);

ObjectReference::PlaySyncedAnimationAndWaitSS
  script : bool ObjectReference::PlaySyncedAnimationAndWaitSS(string asAnimation1, string asEvent1, ObjectReference akObj2, string asAnimation2, string asEvent2);
  engine : bool TESObjectREFR::PlaySyncedAnimationAndWaitSS(BSFixedString const & asAnimation1, BSFixedString const & asEvent1, TESObjectREFR * akObj2, BSFixedString const & asAnimation2, BSFixedString const & asEvent2);

ObjectReference::PlayTerrainEffect
  script : void ObjectReference::PlayTerrainEffect(string asEffectModelName, string asAttachBoneName);
  engine : void TESObjectREFR::PlayTerrainEffect(BSFixedString const & asEffectModelName, BSFixedString const & asAttachBoneName);

ObjectReference::ProcessTrapHit
  script : void ObjectReference::ProcessTrapHit(ObjectReference akTrap, float afDamage, float afPushback, float afXVel, float afYVel, float afZVel, float afXPos, float afYPos, float afZPos, int aeMaterial, float afStagger);
  engine : void TESObjectREFR::ProcessTrapHit(TESObjectREFR * akTrap, float afDamage, float afPushback, float afXVel, float afYVel, float afZVel, float afXPos, float afYPos, float afZPos, int aeMaterial, float afStagger);

ObjectReference::PushActorAway
  script : void ObjectReference::PushActorAway(Actor akActorToPush, float aiKnockbackForce);
  engine : void TESObjectREFR::PushActorAway(Actor * akActorToPush, float aiKnockbackForce);

ObjectReference::RemoveAllInventoryEventFilters
  script : void ObjectReference::RemoveAllInventoryEventFilters();
  engine : void TESObjectREFR::RemoveAllInventoryEventFilters();

ObjectReference::RemoveAllItems
  script : void ObjectReference::RemoveAllItems(ObjectReference akTransferTo, bool abKeepOwnership, bool abRemoveQuestItems);
  engine : void TESObjectREFR::RemoveAllItems(TESObjectREFR * akTransferTo, bool abKeepOwnership, bool abRemoveQuestItems);

ObjectReference::RemoveDependentAnimatedObjectReference
  script : bool ObjectReference::RemoveDependentAnimatedObjectReference(ObjectReference akDependent);
  engine : bool TESObjectREFR::RemoveDependentAnimatedObjectReference(TESObjectREFR * akDependent);

ObjectReference::RemoveInventoryEventFilter
  script : void ObjectReference::RemoveInventoryEventFilter(Form akFilter);
  engine : void TESObjectREFR::RemoveInventoryEventFilter(TESForm * akFilter);

ObjectReference::RemoveItem
  script : void ObjectReference::RemoveItem(Form akItemToRemove, int aiCount, bool abSilent, ObjectReference akOtherContainer);
  engine : void TESObjectREFR::RemoveItem(TESForm * akItemToRemove, uint aiCount, bool abSilent, TESObjectREFR * akOtherContainer);

ObjectReference::Reset
  script : void ObjectReference::Reset(ObjectReference akTarget);
  engine : bool TESObjectREFR::Reset(TESObjectREFR * akTarget);

ObjectReference::Say
  script : void ObjectReference::Say(Topic akTopicToSay, Actor akActorToSpeakAs, bool abSpeakInPlayersHead);
  engine : void TESObjectREFR::Say(TESTopic * akTopicToSay, Actor * akActorToSpeakAs, bool abSpeakInPlayersHead);

ObjectReference::SendStealAlarm
  script : void ObjectReference::SendStealAlarm(Actor akThief);
  engine : void TESObjectREFR::SendStealAlarm(Actor * akThief);

ObjectReference::SetActorCause
  script : void ObjectReference::SetActorCause(Actor akActor);
  engine : void TESObjectREFR::SetActorCause(Actor * akActor);

ObjectReference::SetActorOwner
  script : void ObjectReference::SetActorOwner(ActorBase akActorBase);
  engine : void TESObjectREFR::SetActorOwner(TESNPC * akActorBase);

ObjectReference::SetAngle
  script : void ObjectReference::SetAngle(float afXAngle, float afYAngle, float afZAngle);
  engine : bool TESObjectREFR::SetAngle(float afXAngle, float afYAngle, float afZAngle);

ObjectReference::SetAnimationVariableBool
  script : void ObjectReference::SetAnimationVariableBool(string arVariableName, bool abNewValue);
  engine : void TESObjectREFR::SetAnimationVariableBool(BSFixedString const & arVariableName, bool abNewValue);

ObjectReference::SetAnimationVariableInt
  script : void ObjectReference::SetAnimationVariableInt(string arVariableName, int aiNewValue);
  engine : void TESObjectREFR::SetAnimationVariableInt(BSFixedString const & arVariableName, int aiNewValue);

ObjectReference::SetAnimationVariableFloat
  script : void ObjectReference::SetAnimationVariableFloat(string arVariableName, float afNewValue);
  engine : void TESObjectREFR::SetAnimationVariableFloat(BSFixedString const & arVariableName, float afNewValue);

ObjectReference::SetDestroyed
  script : void ObjectReference::SetDestroyed(bool abDestroyed);
  engine : void TESObjectREFR::SetDestroyed(bool abDestroyed);

ObjectReference::SetScale
  script : void ObjectReference::SetScale(float afScale);
  engine : bool TESObjectREFR::SetScale(float afScale);

ObjectReference::SetFactionOwner
  script : void ObjectReference::SetFactionOwner(Faction akFaction);
  engine : void TESObjectREFR::SetFactionOwner(TESFaction * akFaction);

ObjectReference::SetLockLevel
  script : void ObjectReference::SetLockLevel(int aiLockLevel);
  engine : void TESObjectREFR::SetLockLevel(uint aiLockLevel);

ObjectReference::SetMotionType
  script : void ObjectReference::SetMotionType(int aeMotionType, bool abAllowActivate);
  engine : bool TESObjectREFR::SetMotionType(uint aeMotionType, bool abAllowActivate);

ObjectReference::SetNoFavorAllowed
  script : void ObjectReference::SetNoFavorAllowed(bool abNoFavor);
  engine : void TESObjectREFR::SetNoFavorAllowed(bool abNoFavor);

ObjectReference::SetOpen
  script : void ObjectReference::SetOpen(bool abOpen);
  engine : void TESObjectREFR::SetOpen(bool abOpen);

ObjectReference::SetPosition
  script : void ObjectReference::SetPosition(float afX, float afY, float afZ);
  engine : bool TESObjectREFR::SetPosition(float afX, float afY, float afZ);

ObjectReference::TranslateTo
  script : float ObjectReference::TranslateTo(float afX, float afY, float afZ, float afXAngle, float afYAngle, float afZAngle, float afSpeed, float afMaxRotationSpeed);
  engine : void TESObjectREFR::TranslateTo(TESObjectREFR self, float afX, float afY, float afZ, float afXAngle, float afYAngle, float afZAngle, float afSpeed, float afMaxRotationSpeed);

ObjectReference::SplineTranslateTo
  script : void ObjectReference::SplineTranslateTo(float afX, float afY, float afZ, float afXAngle, float afYAngle, float afZAngle, float afTangentMagnitude, float afSpeed, float afMaxRotationSpeed);
  engine : void TESObjectREFR::SplineTranslateTo(float afX, float afY, float afZ, float afXAngle, float afYAngle, float afZAngle, float afTangentMagnitude, float afSpeed, float afMaxRotationSpeed);

ObjectReference::SplineTranslateToRefNode
  script : void ObjectReference::SplineTranslateToRefNode(ObjectReference arTarget, string arNodeName, float afTangentMagnitude, float afSpeed, float afMaxRotationSpeed);
  engine : void TESObjectREFR::SplineTranslateToRefNode(TESObjectREFR * arTarget, BSFixedString const & arNodeName, float afTangentMagnitude, float afSpeed, float afMaxRotationSpeed);

ObjectReference::StopTranslation
  script : void ObjectReference::StopTranslation();
  engine : void TESObjectREFR::StopTranslation();

ObjectReference::WaitForAnimationEvent
  script : bool ObjectReference::WaitForAnimationEvent(string asEventName);
  engine : bool TESObjectREFR::WaitForAnimationEvent(BSFixedString const & asEventName);

Weapon::Fire
  script : None Weapon::Fire(ObjectReference akSource, Ammo akAmmo);
  engine : void TESObjectWEAP::Fire(TESObjectREFR * akSource, TESAmmo * akAmmo);

Package::GetOwningQuest
  script : Quest Package::GetOwningQuest();
  engine : TESQuest * TESPackage::GetOwningQuest();

Package::GetTemplate
  script : Package Package::GetTemplate();
  engine : TESPackage const * TESPackage::GetTemplate();

Quest::CompleteAllObjectives
  script : None Quest::CompleteAllObjectives();
  engine : void TESQuest::CompleteAllObjectives();

Quest::CompleteQuest
  script : None Quest::CompleteQuest();
  engine : void TESQuest::CompleteQuest();

Quest::FailAllObjectives
  script : None Quest::FailAllObjectives();
  engine : void TESQuest::FailAllObjectives();

Quest::GetAlias
  script : Alias Quest::GetAlias(int aiAliasID);
  engine : BGSBaseAlias * TESQuest::GetAlias(uint aiAliasID);

Quest::GetCurrentStageID
  script : int Quest::GetCurrentStageID();
  engine : uint TESQuest::GetCurrentStageID();

Quest::IsActive
  script : bool Quest::IsActive();
  engine : bool TESQuest::IsActive();

Quest::IsCompleted
  script : bool Quest::IsCompleted();
  engine : bool TESQuest::IsCompleted();

Quest::IsObjectiveCompleted
  script : bool Quest::IsObjectiveCompleted(int aiObjective);
  engine : bool TESQuest::IsObjectiveCompleted(uint aiObjective);

Quest::IsObjectiveDisplayed
  script : bool Quest::IsObjectiveDisplayed(int aiObjective);
  engine : bool TESQuest::IsObjectiveDisplayed(uint aiObjective);

Quest::IsObjectiveFailed
  script : bool Quest::IsObjectiveFailed(int aiObjective);
  engine : bool TESQuest::IsObjectiveFailed(uint aiObjective);

Quest::IsRunning
  script : bool Quest::IsRunning();
  engine : bool TESQuest::IsRunning();

Quest::IsStageDone
  script : bool Quest::IsStageDone(int aiStage);
  engine : bool TESQuest::IsStageDone(uint aiStage);

Quest::IsStarting
  script : bool Quest::IsStarting();
  engine : bool TESQuest::IsStarting();

Quest::IsStopping
  script : bool Quest::IsStopping();
  engine : bool TESQuest::IsStopping();

Quest::IsStopped
  script : bool Quest::IsStopped();
  engine : bool TESQuest::IsStopped();

Quest::Reset
  script : None Quest::Reset();
  engine : void TESQuest::Reset();

Quest::SetActive
  script : None Quest::SetActive(bool abActive);
  engine : void TESQuest::SetActive(bool abActive);

Quest::SetCurrentStageID
  script : bool Quest::SetCurrentStageID(int aiStageID);
  engine : bool TESQuest::SetCurrentStageID(uint aiStageID);

Quest::SetObjectiveCompleted
  script : None Quest::SetObjectiveCompleted(int aiObjective, bool abCompleted);
  engine : void TESQuest::SetObjectiveCompleted(uint aiObjective, bool abCompleted);

Quest::SetObjectiveDisplayed
  script : None Quest::SetObjectiveDisplayed(int aiObjective, bool abDisplayed, bool abForce);
  engine : void TESQuest::SetObjectiveDisplayed(uint aiObjective, bool abDisplayed, bool abForce);

Quest::SetObjectiveFailed
  script : None Quest::SetObjectiveFailed(int aiObjective, bool abFailed);
  engine : void TESQuest::SetObjectiveFailed(uint aiObjective, bool abFailed);

Quest::Start
  script : bool Quest::Start();
  engine : bool TESQuest::Start();

Quest::Stop
  script : None Quest::Stop();
  engine : void TESQuest::Stop();

Quest::UpdateCurrentInstanceGlobal
  script : bool Quest::UpdateCurrentInstanceGlobal(GlobalVariable aUpdateGlobal);
  engine : bool TESQuest::UpdateCurrentInstanceGlobal(TESGlobal * aUpdateGlobal);

Sound::Play
  script : int Sound::Play(ObjectReference akSource);
  engine : uint TESSound::Play(TESObjectREFR * akSource);

Sound::PlayAndWait
  script : bool Sound::PlayAndWait(ObjectReference akSource);
  engine : bool TESSound::PlayAndWait(TESObjectREFR * akSource);

Sound::StopInstance
  script : void Sound::StopInstance(int aiPlaybackInstance);
  engine : void BSScript::StaticFunctionTag::StopInstance(uint aiPlaybackInstance);

Sound::SetInstanceVolume
  script : void Sound::SetInstanceVolume(int aiPlaybackInstance, float afVolume);
  engine : void BSScript::StaticFunctionTag::SetInstanceVolume(uint aiPlaybackInstance, float afVolume);

Topic::Add
  script : None Topic::Add();
  engine : void TESTopic::Add();

TopicInfo::GetOwningQuest
  script : Quest TopicInfo::GetOwningQuest();
  engine : TESQuest * TESTopicInfo::GetOwningQuest();

Actor::AddPerk
  script : void Actor::AddPerk(Perk akPerk);
  engine : void Actor::AddPerk(BGSPerk * akPerk);

Actor::AddShout
  script : bool Actor::AddShout(Shout akShout);
  engine : bool Actor::AddShout(TESShout * akShout);

Actor::AddSpell
  script : bool Actor::AddSpell(Spell akSpell, bool abVerbose);
  engine : bool Actor::AddSpell(SpellItem * akSpell, bool abVerbose);

Actor::AllowBleedoutDialogue
  script : void Actor::AllowBleedoutDialogue(bool abCanTalk);
  engine : void Actor::AllowBleedoutDialogue(bool abCanTalk);

Actor::AllowPCDialogue
  script : void Actor::AllowPCDialogue(bool abTalk);
  engine : void Actor::AllowPCDialogue(bool abTalk);

Actor::AttachAshPile
  script : void Actor::AttachAshPile(Form akAshPileBase);
  engine : void Actor::AttachAshPile(TESForm * akAshPileBase);

Actor::ClearArrested
  script : void Actor::ClearArrested();
  engine : void Actor::ClearArrested();

Actor::ClearExtraArrows
  script : void Actor::ClearExtraArrows();
  engine : void Actor::ClearExtraArrows();

Actor::ClearKeepOffsetFromActor
  script : void Actor::ClearKeepOffsetFromActor();
  engine : void Actor::ClearKeepOffsetFromActor();

Actor::ClearLookAt
  script : void Actor::ClearLookAt();
  engine : void Actor::ClearLookAt();

Actor::DamageActorValue
  script : void Actor::DamageActorValue(string asValueName, float afDamage);
  engine : void Actor::DamageActorValue(BSFixedString const & asValueName, float afDamage);

Actor::DispelAllSpells
  script : void Actor::DispelAllSpells();
  engine : void Actor::DispelAllSpells();

Actor::DispelSpell
  script : bool Actor::DispelSpell(Spell akSpell);
  engine : bool Actor::DispelSpell(SpellItem * akSpell);

Actor::DoCombatSpellApply
  script : void Actor::DoCombatSpellApply(Spell akSpell, ObjectReference akTarget);
  engine : void Actor::DoCombatSpellApply(SpellItem & akSpell, TESObjectREFR * akTarget);

Actor::EnableAI
  script : void Actor::EnableAI(bool abEnable);
  engine : void Actor::EnableAI(bool abEnable);

Actor::EquipItem
  script : void Actor::EquipItem(Form akItem, bool abPreventRemoval, bool abSilent);
  engine : void Actor::EquipItem(TESForm * akItem, bool abPreventRemoval, bool abSilent);

Actor::EquipShout
  script : void Actor::EquipShout(Shout akShout);
  engine : void Actor::EquipShout(TESShout * akShout);

Actor::EquipSpell
  script : void Actor::EquipSpell(Spell akSpell, int aiSource);
  engine : void Actor::EquipSpell(SpellItem * akSpell, uint aiSource);

Actor::EvaluatePackage
  script : void Actor::EvaluatePackage();
  engine : void Actor::EvaluatePackage();

Actor::ForceActorValue
  script : void Actor::ForceActorValue(string asValueName, float afNewValue);
  engine : void Actor::ForceActorValue(BSFixedString const & asValueName, float afNewValue);

Actor::GetActorValue
  script : float Actor::GetActorValue(string asValueName);
  engine : float Actor::GetActorValue(BSFixedString const & asValueName);

Actor::GetActorValuePercentage
  script : float Actor::GetActorValuePercentage(string asValueName);
  engine : float Actor::GetActorValuePercentage(BSFixedString const & asValueName);

Actor::GetBaseActorValue
  script : float Actor::GetBaseActorValue(string asValueName);
  engine : float Actor::GetBaseActorValue(BSFixedString const & asValueName);

Actor::GetBribeAmount
  script : int Actor::GetBribeAmount();
  engine : uint Actor::GetBribeAmount();

Actor::GetCrimeFaction
  script : Faction Actor::GetCrimeFaction();
  engine : TESFaction * Actor::GetCrimeFaction();

Actor::GetCombatState
  script : int Actor::GetCombatState();
  engine : uint Actor::GetCombatState();

Actor::GetCombatTarget
  script : Actor Actor::GetCombatTarget();
  engine : Actor * Actor::GetCombatTarget();

Actor::GetCurrentPackage
  script : Package Actor::GetCurrentPackage();
  engine : TESPackage * Actor::GetCurrentPackage();

Actor::GetDialogueTarget
  script : Actor Actor::GetDialogueTarget();
  engine : Actor * Actor::GetDialogueTarget();

Actor::GetEquippedShout
  script : Shout Actor::GetEquippedShout();
  engine : TESShout * Actor::GetEquippedShout();

Actor::GetEquippedSpell
  script : Spell Actor::GetEquippedSpell(int aiSource);
  engine : SpellItem * Actor::GetEquippedSpell(uint aiSource);

Actor::GetEquippedWeapon
  script : Weapon Actor::GetEquippedWeapon(bool abLeftHand);
  engine : TESObjectWEAP * Actor::GetEquippedWeapon(bool abLeftHand);

Actor::GetEquippedShield
  script : Armor Actor::GetEquippedShield();
  engine : TESObjectARMO * Actor::GetEquippedShield();

Actor::GetEquippedItemType
  script : int Actor::GetEquippedItemType(int aiHand);
  engine : int Actor::GetEquippedItemType(uint aiHand);

Actor::GetFactionRank
  script : int Actor::GetFactionRank(Faction akFaction);
  engine : int Actor::GetFactionRank(TESFaction * akFaction);

Actor::GetFactionReaction
  script : int Actor::GetFactionReaction(Actor akOther);
  engine : uint Actor::GetFactionReaction(Actor * akOther);

Actor::GetFlyingState
  script : int Actor::GetFlyingState();
  engine : uint Actor::GetFlyingState();

Actor::GetGoldAmount
  script : int Actor::GetGoldAmount();
  engine : int Actor::GetGoldAmount();

Actor::GetHighestRelationshipRank
  script : int Actor::GetHighestRelationshipRank();
  engine : int Actor::GetHighestRelationshipRank();

Actor::GetKiller
  script : Actor Actor::GetKiller();
  engine : Actor * Actor::GetKiller();

Actor::GetForcedLandingMarker
  script : ObjectReference Actor::GetForcedLandingMarker();
  engine : TESObjectREFR * Actor::GetForcedLandingMarker();

Actor::GetLevel
  script : int Actor::GetLevel();
  engine : uint Actor::GetLevel();

Actor::GetLeveledActorBase
  script : actorbase Actor::GetLeveledActorBase();
  engine : TESNPC * Actor::GetLeveledActorBase();

Actor::GetLightLevel
  script : float Actor::GetLightLevel();
  engine : float Actor::GetLightLevel();

Actor::GetLowestRelationshipRank
  script : int Actor::GetLowestRelationshipRank();
  engine : int Actor::GetLowestRelationshipRank();

Actor::GetNoBleedoutRecovery
  script : bool Actor::GetNoBleedoutRecovery();
  engine : bool Actor::GetNoBleedoutRecovery();

Actor::GetPlayerControls
  script : bool Actor::GetPlayerControls();
  engine : bool Actor::GetPlayerControls();

Actor::GetRace
  script : Race Actor::GetRace();
  engine : TESRace * Actor::GetRace();

Actor::GetRelationshipRank
  script : int Actor::GetRelationshipRank(Actor akOther);
  engine : int Actor::GetRelationshipRank(Actor * akOther);

Actor::GetSitState
  script : int Actor::GetSitState();
  engine : uint Actor::GetSitState();

Actor::GetSleepState
  script : int Actor::GetSleepState();
  engine : uint Actor::GetSleepState();

Actor::GetVoiceRecoveryTime
  script : float Actor::GetVoiceRecoveryTime();
  engine : float Actor::GetVoiceRecoveryTime();

Actor::HasAssociation
  script : bool Actor::HasAssociation(AssociationType akAssociation, Actor akOther);
  engine : bool Actor::HasAssociation(BGSAssociationType * akAssociation, Actor * akOther);

Actor::HasFamilyRelationship
  script : bool Actor::HasFamilyRelationship(Actor akOther);
  engine : bool Actor::HasFamilyRelationship(Actor * akOther);

Actor::HasLOS
  script : bool Actor::HasLOS(ObjectReference akOther);
  engine : bool Actor::HasLOS(TESObjectREFR * akOther);

Actor::HasMagicEffect
  script : bool Actor::HasMagicEffect(MagicEffect akEffect);
  engine : bool Actor::HasMagicEffect(EffectSetting * akEffect);

Actor::HasMagicEffectWithKeyword
  script : bool Actor::HasMagicEffectWithKeyword(Keyword akKeyword);
  engine : bool Actor::HasMagicEffectWithKeyword(BGSKeyword * akKeyword);

Actor::HasParentRelationship
  script : bool Actor::HasParentRelationship(Actor akOther);
  engine : bool Actor::HasParentRelationship(Actor * akOther);

Actor::HasPerk
  script : bool Actor::HasPerk(Perk akPerk);
  engine : bool Actor::HasPerk(BGSPerk * akPerk);

Actor::HasSpell
  script : bool Actor::HasSpell(Form akForm);
  engine : bool Actor::HasSpell(TESForm * akForm);

Actor::IsAlarmed
  script : bool Actor::IsAlarmed();
  engine : bool Actor::IsAlarmed();

Actor::IsAlerted
  script : bool Actor::IsAlerted();
  engine : bool Actor::IsAlerted();

Actor::IsAllowedToFly
  script : bool Actor::IsAllowedToFly();
  engine : bool Actor::IsAllowedToFly();

Actor::IsArrested
  script : bool Actor::IsArrested();
  engine : bool Actor::IsArrested();

Actor::IsArrestingTarget
  script : bool Actor::IsArrestingTarget();
  engine : bool Actor::IsArrestingTarget();

Actor::IsBleedingOut
  script : bool Actor::IsBleedingOut();
  engine : bool Actor::IsBleedingOut();

Actor::IsBribed
  script : bool Actor::IsBribed();
  engine : bool Actor::IsBribed();

Actor::IsChild
  script : bool Actor::IsChild();
  engine : bool Actor::IsChild();

Actor::IsCommandedActor
  script : bool Actor::IsCommandedActor();
  engine : bool Actor::IsCommandedActor();

Actor::IsDead
  script : bool Actor::IsDead();
  engine : bool Actor::IsDead();

Actor::IsDetectedBy
  script : bool Actor::IsDetectedBy(Actor akOther);
  engine : bool Actor::IsDetectedBy(Actor * akOther);

Actor::IsDoingFavor
  script : bool Actor::IsDoingFavor();
  engine : bool Actor::IsDoingFavor();

Actor::IsEquipped
  script : bool Actor::IsEquipped(Form akItem);
  engine : bool Actor::IsEquipped(TESForm * akItem);

Actor::IsEssential
  script : bool Actor::IsEssential();
  engine : bool Actor::IsEssential();

Actor::IsFlying
  script : bool Actor::IsFlying();
  engine : bool Actor::IsFlying();

Actor::IsGhost
  script : bool Actor::IsGhost();
  engine : bool Actor::IsGhost();

Actor::IsGuard
  script : bool Actor::IsGuard();
  engine : bool Actor::IsGuard();

Actor::IsHostileToActor
  script : bool Actor::IsHostileToActor(Actor akActor);
  engine : bool Actor::IsHostileToActor(Actor * akActor);

Actor::IsInCombat
  script : bool Actor::IsInCombat();
  engine : bool Actor::IsInCombat();

Actor::IsInFaction
  script : bool Actor::IsInFaction(Faction akFaction);
  engine : bool Actor::IsInFaction(TESFaction * akFaction);

Actor::IsInKillMove
  script : bool Actor::IsInKillMove();
  engine : bool Actor::IsInKillMove();

Actor::IsIntimidated
  script : bool Actor::IsIntimidated();
  engine : bool Actor::IsIntimidated();

Actor::IsPlayersLastRiddenHorse
  script : bool Actor::IsPlayersLastRiddenHorse();
  engine : bool Actor::IsPlayersLastRiddenHorse();

Actor::IsPlayerTeammate
  script : bool Actor::IsPlayerTeammate();
  engine : bool Actor::IsPlayerTeammate();

Actor::IsRunning
  script : bool Actor::IsRunning();
  engine : bool Actor::IsRunning();

Actor::IsSneaking
  script : bool Actor::IsSneaking();
  engine : bool Actor::IsSneaking();

Actor::IsSprinting
  script : bool Actor::IsSprinting();
  engine : bool Actor::IsSprinting();

Actor::IsTrespassing
  script : bool Actor::IsTrespassing();
  engine : bool Actor::IsTrespassing();

Actor::IsUnconscious
  script : bool Actor::IsUnconscious();
  engine : bool Actor::IsUnconscious();

Actor::IsWeaponDrawn
  script : bool Actor::IsWeaponDrawn();
  engine : bool Actor::IsWeaponDrawn();

Actor::KeepOffsetFromActor
  script : void Actor::KeepOffsetFromActor(Actor arTarget, float afOffsetX, float afOffsetY, float afOffsetZ, float afOffsetAngleX, float afOffsetAngleY, float afOffsetAngleZ, float afCatchUpRadius, float afFollowRadius);
  engine : void Actor::KeepOffsetFromActor(Actor * arTarget, float afOffsetX, float afOffsetY, float afOffsetZ, float afOffsetAngleX, float afOffsetAngleY, float afOffsetAngleZ, float afCatchUpRadius, float afFollowRadius);

Actor::KillSilent
  script : void Actor::KillSilent(Actor akKiller);
  engine : void Actor::KillSilent(Actor * akKiller);

Actor::Kill
  script : void Actor::Kill(Actor akKiller);
  engine : void Actor::Kill(Actor * akKiller);

Actor::ModActorValue
  script : void Actor::ModActorValue(string asValueName, float afAmount);
  engine : void Actor::ModActorValue(BSFixedString const & asValueName, float afAmount);

Actor::ModFactionRank
  script : void Actor::ModFactionRank(Faction akFaction, int aiMod);
  engine : void Actor::ModFactionRank(TESFaction * akFaction, int aiMod);

Actor::MoveToPackageLocation
  script : void Actor::MoveToPackageLocation();
  engine : bool Actor::MoveToPackageLocation();

Actor::OpenInventory
  script : void Actor::OpenInventory(bool abForceOpen);
  engine : void Actor::OpenInventory(bool abForceOpen);

Actor::PathToReference
  script : bool Actor::PathToReference(ObjectReference aTarget, float afWalkRunPercent);
  engine : bool Actor::PathToReference(TESObjectREFR * aTarget, float afWalkRunPercent);

Actor::PlayIdle
  script : bool Actor::PlayIdle(Idle akIdle);
  engine : bool Actor::PlayIdle(TESIdleForm * akIdle);

Actor::PlayIdleWithTarget
  script : bool Actor::PlayIdleWithTarget(Idle akIdle, ObjectReference akTarget);
  engine : bool Actor::PlayIdleWithTarget(TESIdleForm * akIdle, TESObjectREFR * akTarget);

Actor::PlaySubGraphAnimation
  script : void Actor::PlaySubGraphAnimation(string asEventName);
  engine : void Actor::PlaySubGraphAnimation(BSFixedString const & asEventName);

Actor::RemoveFromFaction
  script : void Actor::RemoveFromFaction(Faction akFaction);
  engine : void Actor::RemoveFromFaction(TESFaction * akFaction);

Actor::RemoveFromAllFactions
  script : void Actor::RemoveFromAllFactions();
  engine : void Actor::RemoveFromAllFactions();

Actor::RemovePerk
  script : void Actor::RemovePerk(Perk akPerk);
  engine : void Actor::RemovePerk(BGSPerk * akPerk);

Actor::RemoveShout
  script : bool Actor::RemoveShout(Shout akShout);
  engine : bool Actor::RemoveShout(TESShout * akShout);

Actor::RemoveSpell
  script : bool Actor::RemoveSpell(Spell akSpell);
  engine : bool Actor::RemoveSpell(SpellItem * akSpell);

Actor::ResetHealthAndLimbs
  script : void Actor::ResetHealthAndLimbs();
  engine : void Actor::ResetHealthAndLimbs();

Actor::Resurrect
  script : void Actor::Resurrect();
  engine : bool Actor::Resurrect();

Actor::RestoreActorValue
  script : void Actor::RestoreActorValue(string asValueName, float afAmount);
  engine : void Actor::RestoreActorValue(BSFixedString const & asValueName, float afAmount);

Actor::SendAssaultAlarm
  script : void Actor::SendAssaultAlarm();
  engine : void Actor::SendAssaultAlarm();

Actor::SendTrespassAlarm
  script : void Actor::SendTrespassAlarm(Actor akCriminal);
  engine : void Actor::SendTrespassAlarm(Actor * akCriminal);

Actor::SetActorValue
  script : void Actor::SetActorValue(string asValueName, float afValue);
  engine : void Actor::SetActorValue(BSFixedString const & asValueName, float afValue);

Actor::SetAlert
  script : void Actor::SetAlert(bool abAlerted);
  engine : void Actor::SetAlert(bool abAlerted);

Actor::SetAllowFlying
  script : void Actor::SetAllowFlying(bool abAllowed);
  engine : void Actor::SetAllowFlying(bool abAllowed);

Actor::SetAlpha
  script : void Actor::SetAlpha(float afTargetAlpha, bool abFade);
  engine : void Actor::SetAlpha(float afTargetAlpha, bool abFade);

Actor::SetAttackActorOnSight
  script : void Actor::SetAttackActorOnSight(bool abAttackOnSight);
  engine : void Actor::SetAttackActorOnSight(bool abAttackOnSight);

Actor::SetBribed
  script : void Actor::SetBribed(bool abBribe);
  engine : void Actor::SetBribed(bool abBribe);

Actor::SetCrimeFaction
  script : void Actor::SetCrimeFaction(Faction akFaction);
  engine : void Actor::SetCrimeFaction(TESFaction * akFaction);

Actor::SetCriticalStage
  script : void Actor::SetCriticalStage(int aiStage);
  engine : void Actor::SetCriticalStage(uint aiStage);

Actor::SetDoingFavor
  script : void Actor::SetDoingFavor(bool abDoingFavor);
  engine : void Actor::SetDoingFavor(bool abDoingFavor);

Actor::SetFactionRank
  script : void Actor::SetFactionRank(Faction akFaction, int aiRank);
  engine : void Actor::SetFactionRank(TESFaction * akFaction, int aiRank);

Actor::SetGhost
  script : void Actor::SetGhost(bool abIsGhost);
  engine : void Actor::SetGhost(bool abIsGhost);

Actor::SetHeadTracking
  script : void Actor::SetHeadTracking(bool abEnable);
  engine : void Actor::SetHeadTracking(bool abEnable);

Actor::SetForcedLandingMarker
  script : void Actor::SetForcedLandingMarker(ObjectReference aMarker);
  engine : void Actor::SetForcedLandingMarker(TESObjectREFR * aMarker);

Actor::SetIntimidated
  script : void Actor::SetIntimidated(bool abIntimidate);
  engine : void Actor::SetIntimidated(bool abIntimidate);

Actor::SetLookAt
  script : void Actor::SetLookAt(ObjectReference akTarget, bool abPathingLookAt);
  engine : void Actor::SetLookAt(TESObjectREFR * akTarget, bool abPathingLookAt);

Actor::SetNoBleedoutRecovery
  script : void Actor::SetNoBleedoutRecovery(bool abAllowed);
  engine : void Actor::SetNoBleedoutRecovery(bool abAllowed);

Actor::SetNotShowOnStealthMeter
  script : void Actor::SetNotShowOnStealthMeter(bool abNotShow);
  engine : void Actor::SetNotShowOnStealthMeter(bool abNotShow);

Actor::SetOutfit
  script : void Actor::SetOutfit(Outfit akOutfit, bool abSleepOutfit);
  engine : void Actor::SetOutfit(BGSOutfit * akOutfit, bool abSleepOutfit);

Actor::SetPlayerControls
  script : void Actor::SetPlayerControls(bool abControls);
  engine : void Actor::SetPlayerControls(bool abControls);

Actor::SetPlayerResistingArrest
  script : void Actor::SetPlayerResistingArrest();
  engine : void Actor::SetPlayerResistingArrest();

Actor::SetPlayerTeammate
  script : void Actor::SetPlayerTeammate(bool abTeammate, bool abCanDoFavor);
  engine : void Actor::SetPlayerTeammate(bool abTeammate, bool abCanDoFavor);

Actor::SetRace
  script : void Actor::SetRace(Race akRace);
  engine : void Actor::SetRace(TESRace * akRace);

Actor::SetRelationshipRank
  script : void Actor::SetRelationshipRank(Actor akOther, int aiRank);
  engine : void Actor::SetRelationshipRank(Actor * akOther, int aiRank);

Actor::SetRestrained
  script : void Actor::SetRestrained(bool abRestrained);
  engine : void Actor::SetRestrained(bool abRestrained);

Actor::SetUnconscious
  script : void Actor::SetUnconscious(bool abUnconscious);
  engine : void Actor::SetUnconscious(bool abUnconscious);

Actor::SetVehicle
  script : void Actor::SetVehicle(ObjectReference akVehicle);
  engine : void Actor::SetVehicle(TESObjectREFR * akVehicle);

Actor::SetVoiceRecoveryTime
  script : void Actor::SetVoiceRecoveryTime(float afTime);
  engine : void Actor::SetVoiceRecoveryTime(float afTime);

Actor::ShowBarterMenu
  script : void Actor::ShowBarterMenu();
  engine : void Actor::ShowBarterMenu();

Actor::ShowGiftMenu
  script : int Actor::ShowGiftMenu(bool abGivingGift, FormList apFilterList, bool abShowStolenItems, bool abUseFavorPoints);
  engine : bool Actor::ShowGiftMenu(bool abGivingGift, BGSListForm * apFilterList, bool abShowStolenItems, bool abUseFavorPoints);

Actor::StartCannibal
  script : void Actor::StartCannibal(Actor akTarget);
  engine : void Actor::StartCannibal(Actor * akTarget);

Actor::StartCombat
  script : void Actor::StartCombat(Actor akTarget);
  engine : void Actor::StartCombat(Actor * akTarget);

Actor::StartVampireFeed
  script : void Actor::StartVampireFeed(Actor akTarget);
  engine : void Actor::StartVampireFeed(Actor * akTarget);

Actor::StopCombat
  script : void Actor::StopCombat();
  engine : void Actor::StopCombat();

Actor::StopCombatAlarm
  script : int Actor::StopCombatAlarm();
  engine : void Actor::StopCombatAlarm();

Actor::TrapSoul
  script : bool Actor::TrapSoul(Actor akTarget);
  engine : bool Actor::TrapSoul(Actor * akTarget);

Actor::UnequipAll
  script : void Actor::UnequipAll();
  engine : void Actor::UnequipAll();

Actor::UnequipItem
  script : void Actor::UnequipItem(Form akItem, bool abPreventEquip, bool abSilent);
  engine : void Actor::UnequipItem(TESForm * akItem, bool abPreventEquip, bool abSilent);

Actor::UnequipShout
  script : void Actor::UnequipShout(Shout akShout);
  engine : void Actor::UnequipShout(TESShout * akShout);

Actor::UnequipSpell
  script : void Actor::UnequipSpell(Spell akSpell, int aiSource);
  engine : void Actor::UnequipSpell(SpellItem * akSpell, uint aiSource);

Actor::UnlockOwnedDoorsInCell
  script : unused;
  engine : void Actor::UnlockOwnedDoorsInCell();

Actor::WillIntimidateSucceed
  script : bool Actor::WillIntimidateSucceed();
  engine : bool Actor::WillIntimidateSucceed();

Actor::WornHasKeyword
  script : bool Actor::WornHasKeyword(Keyword akKeyword);
  engine : bool Actor::WornHasKeyword(BGSKeyword * akKeyword);

Alias::GetOwningQuest
  script : Quest Alias::GetOwningQuest();
  engine : TESQuest * BGSBaseAlias::GetOwningQuest();

Alias::RegisterForAnimationEvent
  script : bool Alias::RegisterForAnimationEvent(ObjectReference akSender, String asEventName);
  engine : bool BGSBaseAlias::RegisterForAnimationEvent(TESObjectREFR * akSender, BSFixedString const & asEventName);

Alias::RegisterForLOS
  script : None Alias::RegisterForLOS(Actor akViewer, ObjectReference akTarget);
  engine : void BGSBaseAlias::RegisterForLOS(Actor * akViewer, TESObjectREFR * akTarget);

Alias::RegisterForSingleLOSGain
  script : None Alias::RegisterForSingleLOSGain(Actor akViewer, ObjectReference akTarget);
  engine : void BGSBaseAlias::RegisterForSingleLOSGain(Actor * akViewer, TESObjectREFR * akTarget);

Alias::RegisterForSingleLOSLost
  script : None Alias::RegisterForSingleLOSLost(Actor akViewer, ObjectReference akTarget);
  engine : void BGSBaseAlias::RegisterForSingleLOSLost(Actor * akViewer, TESObjectREFR * akTarget);

Alias::RegisterForSingleUpdate
  script : None Alias::RegisterForSingleUpdate(float afInterval);
  engine : void BGSBaseAlias::RegisterForSingleUpdate(float afInterval);

Alias::RegisterForSingleUpdateGameTime
  script : None Alias::RegisterForSingleUpdateGameTime(float afInterval);
  engine : void BGSBaseAlias::RegisterForSingleUpdateGameTime(float afInterval);

Alias::RegisterForSleep
  script : None Alias::RegisterForSleep();
  engine : void BGSBaseAlias::RegisterForSleep();

Alias::RegisterForTrackedStatsEvent
  script : None Alias::RegisterForTrackedStatsEvent();
  engine : void BGSBaseAlias::RegisterForTrackedStatsEvent();

Alias::RegisterForUpdate
  script : None Alias::RegisterForUpdate(float afInterval);
  engine : void BGSBaseAlias::RegisterForUpdate(float afInterval);

Alias::RegisterForUpdateGameTime
  script : None Alias::RegisterForUpdateGameTime(float afInterval);
  engine : void BGSBaseAlias::RegisterForUpdateGameTime(float afInterval);

Alias::StartObjectProfiling
  script : None Alias::StartObjectProfiling();
  engine : void BGSBaseAlias::StartObjectProfiling();

Alias::StopObjectProfiling
  script : None Alias::StopObjectProfiling();
  engine : void BGSBaseAlias::StopObjectProfiling();

Alias::UnregisterForAnimationEvent
  script : None Alias::UnregisterForAnimationEvent(ObjectReference akSender, String asEventName);
  engine : void BGSBaseAlias::UnregisterForAnimationEvent(TESObjectREFR * akSender, BSFixedString const & asEventName);

Alias::UnregisterForLOS
  script : None Alias::UnregisterForLOS(Actor akViewer, ObjectReference akTarget);
  engine : void BGSBaseAlias::UnregisterForLOS(Actor * akViewer, TESObjectREFR * akTarget);

Alias::UnregisterForSleep
  script : None Alias::UnregisterForSleep();
  engine : void BGSBaseAlias::UnregisterForSleep();

Alias::UnregisterForTrackedStatsEvent
  script : None Alias::UnregisterForTrackedStatsEvent();
  engine : void BGSBaseAlias::UnregisterForTrackedStatsEvent();

Alias::UnregisterForUpdate
  script : None Alias::UnregisterForUpdate();
  engine : void BGSBaseAlias::UnregisterForUpdate();

Alias::UnregisterForUpdateGameTime
  script : None Alias::UnregisterForUpdateGameTime();
  engine : void BGSBaseAlias::UnregisterForUpdateGameTime();

ReferenceAlias::AddInventoryEventFilter
  script : void ReferenceAlias::AddInventoryEventFilter(Form akFilter);
  engine : void BGSRefAlias::AddInventoryEventFilter(TESForm * akFilter);

ReferenceAlias::Clear
  script : void ReferenceAlias::Clear();
  engine : void BGSRefAlias::Clear();

ReferenceAlias::GetReference
  script : ObjectReference ReferenceAlias::GetReference();
  engine : TESObjectREFR * BGSRefAlias::GetReference();

ReferenceAlias::ForceRefTo
  script : void ReferenceAlias::ForceRefTo(ObjectReference akNewRef);
  engine : void BGSRefAlias::ForceRefTo(TESObjectREFR * akNewRef);

ReferenceAlias::RemoveAllInventoryEventFilters
  script : void ReferenceAlias::RemoveAllInventoryEventFilters();
  engine : void BGSRefAlias::RemoveAllInventoryEventFilters();

ReferenceAlias::RemoveInventoryEventFilter
  script : void ReferenceAlias::RemoveInventoryEventFilter(Form akFilter);
  engine : void BGSRefAlias::RemoveInventoryEventFilter(TESForm * akFilter);

LocationAlias::Clear
  script : void LocationAlias::Clear();
  engine : void BGSLocAlias::Clear();

LocationAlias::GetLocation
  script : Location LocationAlias::GetLocation();
  engine : BGSLocation * BGSLocAlias::GetLocation();

LocationAlias::ForceLocationTo
  script : void LocationAlias::ForceLocationTo(Location akNewLocation);
  engine : void BGSLocAlias::ForceLocationTo(BGSLocation * akNewLocation);

FormList::AddForm
  script : void FormList::AddForm(Form apForm);
  engine : void BGSListForm::AddForm(TESForm * apForm);

FormList::RemoveAddedForm
  script : void FormList::RemoveAddedForm(Form apForm);
  engine : void BGSListForm::RemoveAddedForm(TESForm * apForm);

FormList::GetAt
  script : Form FormList::GetAt(int aiIndex);
  engine : TESForm * BGSListForm::GetAt(uint aiIndex);

FormList::GetSize
  script : int FormList::GetSize();
  engine : uint BGSListForm::GetSize();

FormList::HasForm
  script : bool FormList::HasForm(Form akForm);
  engine : bool BGSListForm::HasForm(TESForm * akForm);

FormList::Revert
  script : void FormList::Revert();
  engine : void BGSListForm::Revert();

Spell::Cast
  script : None Spell::Cast(ObjectReference akSource, ObjectReference akTarget);
  engine : bool SpellItem::Cast(TESObjectREFR * akSource, TESObjectREFR * akTarget);

Spell::RemoteCast
  script : None Spell::RemoteCast(ObjectReference akSource, Actor akBlameActor, ObjectReference akTarget);
  engine : bool SpellItem::RemoteCast(TESObjectREFR * akSource, Actor * akBlameActor, TESObjectREFR * akTarget);

Spell::IsHostile
  script : bool Spell::IsHostile();
  engine : bool SpellItem::IsHostile();

Scroll::Cast
  script : None Scroll::Cast(ObjectReference akSource, ObjectReference akTarget);
  engine : bool ScrollItem::Cast(TESObjectREFR * akSource, TESObjectREFR * akTarget);

ActiveMagicEffect::AddInventoryEventFilter
  script : void ActiveMagicEffect::AddInventoryEventFilter(Form akFilter);
  engine : void ActiveEffect::AddInventoryEventFilter(TESForm * akFilter);

ActiveMagicEffect::Dispel
  script : void ActiveMagicEffect::Dispel();
  engine : void ActiveEffect::Dispel();

ActiveMagicEffect::GetBaseObject
  script : MagicEffect ActiveMagicEffect::GetBaseObject();
  engine : EffectSetting * ActiveEffect::GetBaseObject();

ActiveMagicEffect::GetCasterActor
  script : Actor ActiveMagicEffect::GetCasterActor();
  engine : Actor * ActiveEffect::GetCasterActor();

ActiveMagicEffect::GetTargetActor
  script : Actor ActiveMagicEffect::GetTargetActor();
  engine : Actor * ActiveEffect::GetTargetActor();

ActiveMagicEffect::RegisterForAnimationEvent
  script : bool ActiveMagicEffect::RegisterForAnimationEvent(ObjectReference akSender, string asEventName);
  engine : bool ActiveEffect::RegisterForAnimationEvent(TESObjectREFR * akSender, BSFixedString const & asEventName);

ActiveMagicEffect::RegisterForLOS
  script : void ActiveMagicEffect::RegisterForLOS(Actor akViewer, ObjectReference akTarget);
  engine : void ActiveEffect::RegisterForLOS(Actor * akViewer, TESObjectREFR * akTarget);

ActiveMagicEffect::RegisterForSingleLOSGain
  script : void ActiveMagicEffect::RegisterForSingleLOSGain(Actor akViewer, ObjectReference akTarget);
  engine : void ActiveEffect::RegisterForSingleLOSGain(Actor * akViewer, TESObjectREFR * akTarget);

ActiveMagicEffect::RegisterForSingleLOSLost
  script : void ActiveMagicEffect::RegisterForSingleLOSLost(Actor akViewer, ObjectReference akTarget);
  engine : void ActiveEffect::RegisterForSingleLOSLost(Actor * akViewer, TESObjectREFR * akTarget);

ActiveMagicEffect::RegisterForSingleUpdate
  script : void ActiveMagicEffect::RegisterForSingleUpdate(float afInterval);
  engine : void ActiveEffect::RegisterForSingleUpdate(float afInterval);

ActiveMagicEffect::RegisterForSingleUpdateGameTime
  script : void ActiveMagicEffect::RegisterForSingleUpdateGameTime(float afInterval);
  engine : void ActiveEffect::RegisterForSingleUpdateGameTime(float afInterval);

ActiveMagicEffect::RegisterForSleep
  script : void ActiveMagicEffect::RegisterForSleep();
  engine : void ActiveEffect::RegisterForSleep();

ActiveMagicEffect::RegisterForTrackedStatsEvent
  script : void ActiveMagicEffect::RegisterForTrackedStatsEvent();
  engine : void ActiveEffect::RegisterForTrackedStatsEvent();

ActiveMagicEffect::RegisterForUpdate
  script : void ActiveMagicEffect::RegisterForUpdate(float afInterval);
  engine : void ActiveEffect::RegisterForUpdate(float afInterval);

ActiveMagicEffect::RegisterForUpdateGameTime
  script : void ActiveMagicEffect::RegisterForUpdateGameTime(float afInterval);
  engine : void ActiveEffect::RegisterForUpdateGameTime(float afInterval);

ActiveMagicEffect::RemoveAllInventoryEventFilters
  script : void ActiveMagicEffect::RemoveAllInventoryEventFilters();
  engine : void ActiveEffect::RemoveAllInventoryEventFilters();

ActiveMagicEffect::RemoveInventoryEventFilter
  script : void ActiveMagicEffect::RemoveInventoryEventFilter(Form akFilter);
  engine : void ActiveEffect::RemoveInventoryEventFilter(TESForm * akFilter);

ActiveMagicEffect::StartObjectProfiling
  script : void ActiveMagicEffect::StartObjectProfiling();
  engine : void ActiveEffect::StartObjectProfiling();

ActiveMagicEffect::StopObjectProfiling
  script : void ActiveMagicEffect::StopObjectProfiling();
  engine : void ActiveEffect::StopObjectProfiling();

ActiveMagicEffect::UnregisterForAnimationEvent
  script : void ActiveMagicEffect::UnregisterForAnimationEvent(ObjectReference akSender, string asEventName);
  engine : void ActiveEffect::UnregisterForAnimationEvent(TESObjectREFR * akSender, BSFixedString const & asEventName);

ActiveMagicEffect::UnregisterForLOS
  script : void ActiveMagicEffect::UnregisterForLOS(Actor akViewer, ObjectReference akTarget);
  engine : void ActiveEffect::UnregisterForLOS(Actor * akViewer, TESObjectREFR * akTarget);

ActiveMagicEffect::UnregisterForSleep
  script : void ActiveMagicEffect::UnregisterForSleep();
  engine : void ActiveEffect::UnregisterForSleep();

ActiveMagicEffect::UnregisterForTrackedStatsEvent
  script : void ActiveMagicEffect::UnregisterForTrackedStatsEvent();
  engine : void ActiveEffect::UnregisterForTrackedStatsEvent();

ActiveMagicEffect::UnregisterForUpdate
  script : void ActiveMagicEffect::UnregisterForUpdate();
  engine : void ActiveEffect::UnregisterForUpdate();

ActiveMagicEffect::UnregisterForUpdateGameTime
  script : void ActiveMagicEffect::UnregisterForUpdateGameTime();
  engine : void ActiveEffect::UnregisterForUpdateGameTime();

Weather::ReleaseOverride
  script : void Weather::ReleaseOverride();
  engine : void BSScript::StaticFunctionTag::ReleaseOverride();

Weather::GetCurrentWeather
  script : Weather Weather::GetCurrentWeather();
  engine : TESWeather * BSScript::StaticFunctionTag::GetCurrentWeather();

Weather::GetOutgoingWeather
  script : Weather Weather::GetOutgoingWeather();
  engine : TESWeather * BSScript::StaticFunctionTag::GetOutgoingWeather();

Weather::GetCurrentWeatherTransition
  script : float Weather::GetCurrentWeatherTransition();
  engine : float BSScript::StaticFunctionTag::GetCurrentWeatherTransition();

Weather::GetSkyMode
  script : int Weather::GetSkyMode();
  engine : uint BSScript::StaticFunctionTag::GetSkyMode();

Weather::FindWeather
  script : Weather Weather::FindWeather(int auiType);
  engine : TESWeather * BSScript::StaticFunctionTag::FindWeather(uint auiType);

Weather::ForceActive
  script : void Weather::ForceActive(bool abOverride);
  engine : void TESWeather::ForceActive(bool abOverride);

Weather::SetActive
  script : void Weather::SetActive(bool abOverride, bool abAccelerate);
  engine : void TESWeather::SetActive(bool abOverride, bool abAccelerate);

Weather::GetClassification
  script : int Weather::GetClassification();
  engine : int TESWeather::GetClassification();

Ingredient::IsHostile
  script : bool Ingredient::IsHostile();
  engine : bool IngredientItem::IsHostile();

Ingredient::LearnEffect
  script : void Ingredient::LearnEffect(int aiIndex);
  engine : void IngredientItem::LearnEffect(uint aiIndex);

Ingredient::LearnNextEffect
  script : int Ingredient::LearnNextEffect();
  engine : uint IngredientItem::LearnNextEffect();

Ingredient::LearnAllEffects
  script : void Ingredient::LearnAllEffects();
  engine : void IngredientItem::LearnAllEffects();

Potion::IsHostile
  script : bool Potion::IsHostile();
  engine : bool AlchemyItem::IsHostile();

Enchantment::IsHostile
  script : bool Enchantment::IsHostile();
  engine : bool EnchantmentItem::IsHostile();

