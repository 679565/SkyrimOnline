#include <Game/Map.h>

namespace Skyrim
{
	namespace Game
	{
		//---------------------------------------------------------------------
		static uint32_t ValidLocations[] = {
			0x0001706E,
			0x0001706D,
			0x0001706C,
			0x0001706B,
			0x0001705D,
			0x0001705C,
			0x0001705B,
			0x0010FE46,
			0x0010FE44,
			0x0010FE43,
			0x0010FE42,
			0x0010FE41,
			0x0010FE2D,
			0x0010FE2C,
			0x0010D4BA,
			0x00108A5A,
			0x001033AF,
			0x001033AE,
			0x000FDBDF,
			0x000FDBCF,
			0x000FDA46,
			0x000FD685,
			0x000F8474,
			0x000F6F13,
			0x000F5BA7,
			0x000F5BA5,
			0x000F5BA2,
			0x000F52DA,
			0x000F52B0,
			0x000F0A18,
			0x000EF572,
			0x000EF54C,
			0x000EF546,
			0x000EF0BC,
			0x000EF0B0,
			0x000EF0A9,
			0x000EF0A2,
			0x000EE3FE,
			0x000ECF88,
			0x000ECF53,
			0x000ECF4D,
			0x000ECF4C,
			0x000EAA62,
			0x000EA63B,
			0x000E9DA7,
			0x000DDF6D,
			0x000DDF6C,
			0x000DAB88,
			0x000D9537,
			0x000C342D,
			0x000C3428,
			0x000C2EFC,
			0x000C2EF8,
			0x000C2EF1,
			0x000C2EED,
			0x000C2EE7,
			0x000BEDEE,
			0x000BC0AC,
			0x000BC0A3,
			0x000B23AC,
			0x000B23A5,
			0x000B239F,
			0x000B2395,
			0x000B2391,
			0x000B238D,
			0x000998BE,
			0x00090576,
			0x00080F28,
			0x00065C5F,
			0x0005CF3E,
			0x000233EE,
			0x000E66AB,
			0x000E66A9,
			0x000E66A5,
			0x000E66A0,
			0x000E2502,
			0x000D9079,
			0x000D567F,
			0x000D567E,
			0x000D567D,
			0x000D567C,
			0x000D567B,
			0x000D567A,
			0x000D5679,
			0x000D5678,
			0x000D5677,
			0x000D5676,
			0x000D5675,
			0x000D5673,
			0x000D5671,
			0x000D566F,
			0x000D566D,
			0x000D566B,
			0x000D5669,
			0x000D5667,
			0x000D5665,
			0x000D5663,
			0x000D16E6,
			0x000D16E5,
			0x000C6C2A,
			0x000C65B8,
			0x000C33AF,
			0x000C0BA0,
			0x000A828B,
			0x000A0E30,
			0x00061AE3,
			0x00016F85,
			0x0004B679,
			0x000479B3,
			0x00047886,
			0x0004787B,
			0x00047825,
			0x0008E1B7,
			0x0008B5EC,
			0x0008B5EB,
			0x00084D12,
			0x00084D11,
			0x0007592B,
			0x00072B1D,
			0x00072B1C,
			0x0005E0FD,
			0x0005E0FC,
			0x0005E0FB,
			0x00047259,
			0x000BED97,
			0x000BBB45,
			0x000B712C,
			0x000A8C86,
			0x000A3F49,
			0x0009D5A3,
			0x0009CD0F,
			0x0009CD0E,
			0x0009CD0D,
			0x0009B9D2,
			0x00092497,
			0x00023E5D,
			0x000884C8,
			0x00084281,
			0x0007B91A,
			0x00076F3A,
			0x000350BC,
			0x0007312F,
			0x0007046A,
			0x0006E830,
			0x0006CCC6,
			0x00067985,
			0x00067984,
			0x00067983,
			0x00067982,
			0x00067981,
			0x00067980,
			0x000674F0,
			0x00046BAC,
			0x00024016,
			0x00060365,
			0x0005F428,
			0x0005CA27,
			0x0005CA26,
			0x00057971,
			0x00056621,
			0x0005254C,
			0x0005254B,
			0x0004FEF1,
			0x00049B60,
			0x00046E15,
			0x00043D3A,
			0x0004378B,
			0x0002DE25,
			0x0002DE24,
			0x00019429,
			0x00018ED2,
			0x0003BC2B,
			0x0003B871,
			0x0003AFEA,
			0x0003AFE9,
			0x0003AFE8,
			0x00039AA9,
			0x00036BAA,
			0x000358B9,
			0x000358B8,
			0x000358B7,
			0x0003444E,
			0x00033DA0,
			0x0003059A,
			0x00030597,
			0x0002E770,
			0x0002D51D,
			0x0002D51C,
			0x0002BCEB,
			0x000240E6,
			0x000240CF,
			0x000226B3,
			0x000226B1,
			0x000226B0,
			0x000226AE,
			0x000226AA,
			0x000226A7,
			0x000226A4,
			0x00022653,
			0x00022650,
			0x0002264E,
			0x0002264C,
			0x0002264A,
			0x00022648,
			0x00022646,
			0x00022644,
			0x00022642,
			0x00022640,
			0x0002263F,
			0x0002263D,
			0x0002263B,
			0x00022639,
			0x00022487,
			0x00022484,
			0x00022482,
			0x00022480,
			0x0002247E,
			0x000216A7,
			0x00020A1A,
			0x00020A18,
			0x00020A11,
			0x00020A10,
			0x00020A0E,
			0x00020A07,
			0x00020A02,
			0x00020A00,
			0x000209F9,
			0x000209F7,
			0x000209F6,
			0x000209F5,
			0x000209F4,
			0x000209F3,
			0x000209F2,
			0x000209F1,
			0x000209F0,
			0x000209EF,
			0x000209EE,
			0x000209ED,
			0x000209EC,
			0x000209EB,
			0x000209EA,
			0x000209E9,
			0x000209E8,
			0x000209E7,
			0x000209E6,
			0x000209E5,
			0x000209E4,
			0x000209CB,
			0x00020555,
			0x000200C9,
			0x000200C7,
			0x000200C5,
			0x000200C3,
			0x000200C1,
			0x000200BF,
			0x000200BD,
			0x000200BB,
			0x000200AB,
			0x000200A5,
			0x000200A3,
			0x000200A1,
			0x0002009E,
			0x0002009C,
			0x0002009A,
			0x00020098,
			0x00020096,
			0x00020094,
			0x00020092,
			0x00020090,
			0x0002008E,
			0x0002008C,
			0x0002008A,
			0x00020088,
			0x00020086,
			0x00020084,
			0x00020082,
			0x00020080,
			0x0002007E,
			0x0002007C,
			0x0002007A,
			0x00020078,
			0x00020076,
			0x00020074,
			0x00020065,
			0x00020064,
			0x00020063,
			0x00020062,
			0x00020061,
			0x00020060,
			0x0002005F,
			0x0002005E,
			0x0002005D,
			0x0002005C,
			0x0002005B,
			0x00020054,
			0x0002004C,
			0x0002004B,
			0x00020008,
			0x00020006,
			0x0001F885,
			0x0001F884,
			0x0001F883,
			0x0001F882,
			0x0001F881,
			0x0001F880,
			0x0001F87E,
			0x0001F87D,
			0x0001F87C,
			0x0001F87B,
			0x0001F87A,
			0x0001F879,
			0x0001F878,
			0x0001F877,
			0x0001F876,
			0x0001F875,
			0x0001F874,
			0x0001F873,
			0x0001F872,
			0x0001F871,
			0x0001F870,
			0x0001F86F,
			0x0001F86E,
			0x0001F86D,
			0x0001F86C,
			0x0001F86B,
			0x0001F86A,
			0x0001F805,
			0x0001F802,
			0x0001F801,
			0x0001F7FE,
			0x0001F7FD,
			0x0001F7D4,
			0x0001F7D3,
			0x0001F7CB,
			0x0001F7C1,
			0x0001F7C0,
			0x0001F7BF,
			0x0001F7BE,
			0x0001F7BD,
			0x0001F7B8,
			0x0001F7B7,
			0x0001F7B6,
			0x0001F7B5,
			0x0001F317,
			0x0001F316,
			0x0001F315,
			0x0001F314,
			0x0001F313,
			0x0001F312,
			0x0001F311,
			0x0001F310,
			0x0001F30F,
			0x0001F30E,
			0x0001F30D,
			0x0001F30C,
			0x0001F30B,
			0x0001F30A,
			0x0001EB9E,
			0x0001EB9C,
			0x0001EB9A,
			0x0001EB98,
			0x0001EB96,
			0x0001EB94,
			0x0001EB92,
			0x0001EB8F,
			0x0001EB8E,
			0x0001EB8B,
			0x0001EB7E,
			0x0001EB7D,
			0x0001EB7C,
			0x0001EB7B,
			0x0001EB7A,
			0x0001EB79,
			0x0001EB74,
			0x0001CB8D,
			0x0001CB8C,
			0x0001CB8B,
			0x0001CB8A,
			0x0001CB89,
			0x0001CB88,
			0x0001BDFD,
			0x0001BDFC,
			0x000192CA,
			0x000192C9,
			0x000192C8,
			0x000192C7,
			0x000192C5,
			0x000192C4,
			0x000192C3,
			0x000192C2,
			0x000192C1,
			0x000192C0,
			0x000192BF,
			0x000192BE,
			0x000192BD,
			0x000192BC,
			0x000192BB,
			0x000192BA,
			0x000192B9,
			0x000192B8,
			0x000192B7,
			0x000192B6,
			0x000192B5,
			0x000192B2,
			0x000192B1,
			0x000192AF,
			0x000192AE,
			0x000192AD,
			0x000192AC,
			0x000192AB,
			0x000192AA,
			0x000192A9,
			0x000192A8,
			0x000192A6,
			0x000192A5,
			0x000192A4,
			0x000192A3,
			0x000192A2,
			0x000192A1,
			0x000192A0,
			0x0001929E,
			0x0001929D,
			0x0001929C,
			0x0001929B,
			0x0001929A,
			0x00019299,
			0x00019297,
			0x00019296,
			0x00019295,
			0x00019294,
			0x00019293,
			0x00019292,
			0x00019291,
			0x00019290,
			0x0001928F,
			0x0001928D,
			0x0001928C,
			0x0001928A,
			0x00019289,
			0x00019288,
			0x00019287,
			0x00019286,
			0x00019285,
			0x00019284,
			0x00019283,
			0x00019282,
			0x00019281,
			0x00019280,
			0x0001927F,
			0x0001927E,
			0x0001927D,
			0x0001927C,
			0x0001927B,
			0x0001927A,
			0x00019279,
			0x00019278,
			0x00019277,
			0x00019276,
			0x00019275,
			0x00019274,
			0x00019273,
			0x00019272,
			0x00019271,
			0x00019270,
			0x0001926F,
			0x0001926E,
			0x0001926D,
			0x0001926C,
			0x0001926B,
			0x00019269,
			0x00019268,
			0x00019267,
			0x00019266,
			0x00019265,
			0x00019264,
			0x00019263,
			0x00019262,
			0x00019261,
			0x00019260,
			0x0001925F,
			0x0001919D,
			0x0001919C,
			0x0001919B,
			0x00019199,
			0x00019198,
			0x00019197,
			0x00019196,
			0x00019195,
			0x00019194,
			0x00019193,
			0x00019192,
			0x00019191,
			0x00019190,
			0x0001918F,
			0x0001918E,
			0x0001918D,
			0x0001918C,
			0x0001918B,
			0x0001918A,
			0x00019189,
			0x00019188,
			0x00019187,
			0x00019186,
			0x00019185,
			0x00019184,
			0x00019183,
			0x00019182,
			0x00019181,
			0x00019180,
			0x0001917F,
			0x0001917E,
			0x0001917D,
			0x0001917C,
			0x0001917B,
			0x0001917A,
			0x00019179,
			0x00019178,
			0x00019177,
			0x00019176,
			0x00019175,
			0x00019174,
			0x00019173,
			0x00019172,
			0x00019171,
			0x00019170,
			0x0001916F,
			0x0001916E,
			0x0001916D,
			0x0001916C,
			0x0001916B,
			0x0001916A,
			0x00019169,
			0x00019168,
			0x00019167,
			0x00019166,
			0x00019165,
			0x00019164,
			0x00019163,
			0x00019162,
			0x00019161,
			0x00019160,
			0x0001915F,
			0x0001915E,
			0x0001915D,
			0x0001915C,
			0x0001915B,
			0x0001915A,
			0x00019159,
			0x00019158,
			0x00019157,
			0x00019156,
			0x00019154,
			0x00019153,
			0x00019152,
			0x00019151,
			0x00019150,
			0x0001914F,
			0x0001914E,
			0x0001914D,
			0x0001914C,
			0x0001914B,
			0x0001914A,
			0x00018EEF,
			0x00018EEE,
			0x00018EED,
			0x00018EEC,
			0x00018EEB,
			0x00018EEA,
			0x00018EE9,
			0x00018EE8,
			0x00018EE7,
			0x00018EE6,
			0x00018EE5,
			0x00018EE4,
			0x00018EE3,
			0x00018EE2,
			0x00018EE1,
			0x00018E45,
			0x00018E44,
			0x00018E43,
			0x00018E42,
			0x00018E41,
			0x00018E40,
			0x00018E3F,
			0x00018E3E,
			0x00018E3D,
			0x00018E3C,
			0x00018E3B,
			0x00018E3A,
			0x00018E39,
			0x00018E38,
			0x00018E36,
			0x00018E35,
			0x00018E34,
			0x00018E33,
			0x00018E32,
			0x00018E31,
			0x00018E30,
			0x00018C92,
			0x00018C91,
			0x00018C90,
			0x00018C8F,
			0x00018C8E,
			0x00018C8D,
			0x00018C8C,
			0x00018C8B,
			0x00018A5A,
			0x00018A59,
			0x00018A58,
			0x00018A57,
			0x00018A56,
			0x00018A55,
			0x00018A54,
			0x00018A53,
			0x00018A52,
			0x00018A51,
			0x00018A50,
			0x00018A4F,
			0x00018A4E,
			0x00018A4D,
			0x00018A4C,
			0x00018A4B,
			0x00018A4A,
			0x00018A49,
			0x00018A48,
			0x00018A47,
			0x00018A46,
			0x00016772,
			0x00016770,
			0x0001676F,
			0x0001676E,
			0x0001676D,
			0x0001676C,
			0x0001676B,
			0x0001676A,
			0x00016769,
			0x00013163,
			0x000130FF
		};
		//---------------------------------------------------------------------
		Map::Map()
		{
			for(uint32_t i = 0; i < 638; ++i)
			{
				mRegions[ValidLocations[i]] = boost::make_shared<Region>();
			}
		}
		//---------------------------------------------------------------------
		Map::~Map()
		{

		}
		//---------------------------------------------------------------------
		void Map::Update(uint32_t pDelta)
		{
			std::for_each(mRegions.begin() , mRegions.end(), [pDelta](std::pair<uint32_t, Region::pointer> pRegion)
			{
				pRegion.second->Update(pDelta);
			});
		}
		//---------------------------------------------------------------------
		bool Map::EnterRegion(const uint32_t pRegion, Logic::Session::pointer pSession)
		{
			if(IsValid(pRegion))
			{
				mRegions[pRegion]->Add(pSession);
				return true;
			}
			return false;
		}
		//---------------------------------------------------------------------
		bool Map::LeaveRegion(const uint32_t pRegion, Logic::Session::pointer pSession)
		{
			if(IsValid(pRegion))
			{
				mRegions[pRegion]->Remove(pSession);
				return true;
			}
			return false;
		}
		//---------------------------------------------------------------------
		Region::pointer Map::GetRegion(uint32_t pRegion)
		{
			if(IsValid(pRegion))
				return mRegions[pRegion];

			return Region::pointer();
		}
		//---------------------------------------------------------------------
		bool Map::IsValid(uint32_t pRegion)
		{
			for(uint32_t i = 0; i < 638; ++i)
			{
				if(ValidLocations[i] == pRegion)
					return true;
			}
			return false;
		}
		//---------------------------------------------------------------------
	}
}